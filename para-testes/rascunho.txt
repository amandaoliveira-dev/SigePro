
versão mais recente funciona de aparencias
admi.css
/* Configurações Globais e Cores */
:root {
    --bg-color: #121212;
    --panel-color: #1E1E1E;
    --text-color: #E0E0E0;
    --primary-gradient: linear-gradient(90deg, #FF007A, #FF5F1F);
    --border-color: #444;
    --success-color: #28a745;
    --error-color: #dc3545;
    --warning-color: #ffc107;
    --warning-color2: #ff0019;
}

body {
    font-family: 'Poppins', sans-serif;
    background-color: var(--bg-color);
    color: var(--text-color);
    margin: 0;
    height: 100vh;
    overflow: hidden;
    display: flex;
    flex-direction: column;
}

/* Estrutura Principal */
.admin-container {
    display: flex;
    flex-grow: 1;
    min-height: 0;
}

/* Menu Lateral (Sidebar) */
.sidebar {
    width: 250px;
    background-color: var(--panel-color);
    padding: 20px;
    display: flex;
    flex-direction: column;
    border-right: 1px solid var(--border-color);
    flex-shrink: 0; /* Adicione esta linha */
}
.sidebar-header {
    padding: 10px;
    text-align: center;
    margin-bottom: 20px;
    flex-shrink: 0;
}
.sidebar-header h1 {
    margin: 0;
    font-size: 1.8em;
    background: var(--primary-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}
.sidebar-header span {
    font-size: 0.9em;
    color: #888;
}
.sidebar .nav-list {
    list-style: none;
    padding: 0 5px 0 0;
    margin: 0;
    flex-grow: 1;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: #444 #2a2a2a;
}
.sidebar ul li a {
    display: block;
    color: var(--text-color);
    text-decoration: none;
    padding: 15px;
    margin-bottom: 5px;
    border-radius: 8px;
    transition: background-color 0.3s, color 0.3s;
    border-left: 4px solid transparent;
}
.sidebar ul li a:hover {
    background-color: #333;
}
.sidebar ul li a.active {
    background-color: rgba(255, 95, 31, 0.1);
    color: #FF5F1F;
    font-weight: 600;
    border-left: 4px solid #FF5F1F;
}
.goto-pos {
    text-align: center; color: #aaa; text-decoration: none;
    padding: 15px; border-radius: 8px; border: 1px solid var(--border-color);
    margin-top: 20px;
    flex-shrink: 0;
}
.goto-pos:hover { background-color: #333; color: white; }

.sidebar .nav-list::-webkit-scrollbar { width: 10px; }
.sidebar .nav-list::-webkit-scrollbar-track { background: transparent; }
.sidebar .nav-list::-webkit-scrollbar-thumb { background: #444; border-radius: 5px; border: 3px solid var(--panel-color); }
.sidebar .nav-list::-webkit-scrollbar-thumb:hover { background: #555; }

/* Conteúdo Principal */
.content {
    flex-grow: 1;
    padding: 40px;
    overflow-y: auto;
    min-width: 0;
}
.content-panel {
    display: none;
}
.content-panel.active {
    display: block;
}
h2 {
    margin-top: 0;
    font-weight: 600;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--border-color);
}

/* Formulários */
.form-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px 30px;
    background-color: var(--panel-color);
    padding: 25px;
    border-radius: 8px;
}
.form-group { display: flex; flex-direction: column; }
.form-group label { margin-bottom: 8px; font-size: 0.9em; }
.form-group input, .form-group select, .form-group textarea {
    padding: 12px; background-color: #333; border: 1px solid var(--border-color);
    border-radius: 5px; color: var(--text-color); font-size: 1em;
    font-family: 'Poppins', sans-serif; /* Garante a mesma fonte */
}
.form-group input:focus, .form-group select:focus { outline: none; border-color: #FF5F1F; }
.form-container .section-divider {
    grid-column: 1 / -1; margin-top: 10px; margin-bottom: -5px; font-size: 0.8em;
    text-transform: uppercase; color: #888; padding-bottom: 5px; border-bottom: 1px solid var(--border-color);
}
.form-group.large-field { grid-column: 1 / -1; }

.lookup-status {
    display: block;
    margin-top: 6px;
    font-size: 0.8em; /* Leve ajuste para o uppercase */
    font-style: normal; /* Remove o itálico */
    font-weight: 600; /* Deixa o texto um pouco mais forte */
    text-transform: uppercase; /* Transforma em caixa alta */
    color: var(--success-color);
}
.lookup-status.error { color: var(--error-color); }
input[type="date"] { color-scheme: dark; }
.uppercase-input { text-transform: uppercase; }

/* Cabeçalho da Tabela e Busca */
.table-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 50px;
    margin-bottom: 10px;
    padding-top: 30px;

    /* --- MÁGICA DO GRADIENTE ABAIXO --- */
    border-top: none; /* 1. Removemos a borda antiga */
    background-image: var(--primary-gradient); /* 2. Aplicamos o gradiente como fundo */
    background-size: 100% 2px; /* 3. Definimos o tamanho: 100% de largura e 2px de altura (nossa linha) */
    background-repeat: no-repeat; /* 4. Garantimos que a linha não se repita para baixo */
    background-position: top; /* 5. Posicionamos a linha no topo do elemento */
}

.table-header h3 { margin: 0; font-weight: 500; color: #ccc; }
.search-container { margin: 0; }
.search-input { width: 350px; padding: 10px 15px; background-color: #333; border: 1px solid var(--border-color); border-radius: 5px; color: var(--text-color); font-size: 0.9em; box-sizing: border-box; }
.search-input:focus { outline: none; border-color: #FF5F1F; }

/* Tabelas */
.table-container {
    background-color: var(--panel-color);
    border-radius: 8px;
    padding: 10px;
    margin-top: 0;
    max-height: 80vh; /* Limita a altura da tabela a 60% da altura da tela */
    overflow-y: auto; /* Adiciona a rolagem vertical se necessário */
}
table { width: 100%; border-collapse: collapse; }
th, td { padding: 15px; text-align: left; border-bottom: 1px solid var(--border-color); }
td.code-column { font-weight: bold; color: #FF5F1F; text-align: left; }
thead { background-color: #2a2a2a; }
.actions button { margin-right: 5px; background: none; border: 1px solid; color: var(--text-color); padding: 5px 10px; border-radius: 5px; cursor: pointer; font-size: 0.9em; transition: all 0.2s; }
.btn-view { color: #17a2b8; border-color: #17a2b8; }
.btn-edit { color: #5aa1ff; border-color: #5aa1ff; }
.btn-delete { color: #ff4d4d; border-color: #ff4d4d; }
.btn-view:hover, .btn-edit:hover, .btn-delete:hover { background-color: #333; color: white; }

/* Botões */
/* SUBSTITUA O PRIMEIRO .btn-primary POR ESTE CÓDIGO UNIFICADO */
.btn-primary {
    grid-column: 1 / -1;
    margin-top: 10px;
    padding: 15px;
    border: none;
    border-radius: 5px;
    background: var(--primary-gradient);
    color: white;
    font-size: 1.1em;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    flex-grow: 0; 
    margin-left: 0;
}
.btn-primary:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(255, 95, 31, 0.4);
}
.btn-secondary {
    background-color: #555;
    border: none;
    color: white;
    padding: 15px;
    border-radius: 5px;
    font-size: 1.1em;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
}
.btn-secondary:hover {
    background-color: #666;
    transform: translateY(-3px);
}

/* Estilos do Dashboard de Relatórios e Histórico */
.summary-cards-container { display: grid; grid-template-columns: repeat(auto-fill, minmax(220px, 1fr)); gap: 20px; margin-top: 20px; }
.summary-card { background-color: var(--panel-color); padding: 25px; border-radius: 8px; border-left: 5px solid var(--border-color); }
.summary-card h3 { margin: 0 0 10px 0; font-size: 1em; font-weight: 400; color: #aaa; text-transform: uppercase; border: none; }
.summary-card p { margin: 0; font-size: 2.2em; font-weight: 600; color: var(--text-color); }
.summary-card:first-child p { color: var(--success-color); }
.reports-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 40px; }
.report-widget { background-color: var(--panel-color); padding: 25px; border-radius: 8px; }
.report-widget h3 { margin-top: 0; padding-bottom: 10px; border-bottom: 1px solid var(--border-color); }
.report-widget ul { list-style: none; padding: 0; margin: 0; }
.report-widget ul li { display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #2a2a2a; font-size: 0.9em; }
.report-widget ul li:last-child { border-bottom: none; }
.report-widget ul li span:last-child { font-weight: 600; }
.report-widget.low-stock ul li { color: var(--warning-color); }
.filters-container { display: flex; flex-wrap: wrap; gap: 30px; align-items: flex-end; background-color: var(--panel-color); padding: 20px 25px; border-radius: 8px; margin-bottom: 20px; }
.filters-container .form-group { margin-bottom: 0; }
.filters-container .search-input { width: 350px; margin: 0; }
.date-range { display: flex; align-items: center; gap: 10px; }
.date-range input { width: 150px; }

/* --- NOVOS ESTILOS PARA A NAVEGAÇÃO SECUNDÁRIA --- */
.sub-nav {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    border-bottom: 2px solid var(--border-color);
    margin-bottom: 30px;
    padding-bottom: 15px;
     align-items: center;
}
.sub-nav-link {
    color: var(--text-color);
    text-decoration: none;
    padding: 8px 16px;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.2s ease-in-out;
}
.sub-nav-link:hover {
    background-color: #333;
}
.sub-nav-link.active {
    background: var(--primary-gradient);
    color: white;
    font-weight: 600;
}
.sub-panel {
    display: none;
}
.sub-panel.active {
    display: block;
}

.modal-actions .btn-primary {
    margin-top: 0;
}
.modal-actions .btn-secondary {
    margin-top: 0;
}

/* --- ESTILOS CORRIGIDOS PARA BOTÕES DE NAVEGAÇÃO E LIMPAR CAMPOS DE DADOS --- */
   /* --- ESTILOS FINAIS E CORRIGIDOS PARA AÇÕES DO FORMULÁRIO --- */

/* Mantém o estilo do cabeçalho que você gostou */
.form-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 10px;
    margin-bottom: 20px;
}

.form-header h2 {
    margin: 0;
    padding: 0;
    border: none;
}

/* NOVO: Container para o botão de limpar de baixo */
.form-actions-bottom {
    display: flex;
    justify-content: flex-end; /* Alinha o botão à direita */
    margin-top: 15px; /* Espaço entre o fim do form e o botão */
}


/* Estilo do botão de limpar minimalista (pode manter) */
.btn-limpar {
    padding: 8px 15px;
    border-radius: 5px;
    border: 1px solid var(--border-color);
    background-color: transparent;
    color: #aaa;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
    white-space: nowrap;
}

.btn-limpar:hover {
    background-color: #333;
    color: white;
    border-color: #555;
}
/* Estilo COMUM para ambos os botões (COM MAIS DESTAQUE) */
.scroll-btn {
    position: fixed;
    right: 30px;
    z-index: 999;

    width: 30px;
    height: 30px;
    border-radius: 8px;
    border: none; /* Removemos a borda sutil */
    background: var(--primary-gradient); /* Usamos o gradiente principal */
    color: white; /* Cor do ícone branca para contraste */
    font-size: 15px; /* Ícone um pouco maior */
    font-weight: bold;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4); /* Sombra para destacar */

    opacity: 0;
    visibility: hidden;
    transform: translateY(10px); /* Animação de subida */
}

/* Classe para torná-los visíveis */
.scroll-btn.visible {
    opacity: 0.9; /* Opacidade quase total */
    visibility: visible;
    transform: translateY(0);
}

.scroll-btn:hover {
    opacity: 1; /* Opacidade total no hover */
    transform: scale(1.1); /* Efeito de zoom */
    box-shadow: 0 6px 15px rgba(255, 95, 31, 0.5); /* Sombra mais forte da cor do botão */
}

/* POSIÇÃO INDIVIDUAL DE CADA BOTÃO */

#btn-scroll-up {
    top: 30px; /* <-- POSICIONA O BOTÃO DE SUBIR NO TOPO */
}

#btn-scroll-down {
    bottom: 30px; /* <-- POSICIONA O BOTÃO DE DESCER NA BASE */
}
/* ========================================================== */
/* AJUSTES FINAIS PARA TABELA DE CADASTROS */
/* ========================================================== */

/* 1. Diminui a fonte geral da tabela */
.table-container table th,
.table-container table td {
    font-size: 0.8em; /* Deixa a fonte 10% menor. Ajuste se quiser. */
    vertical-align: middle; /* Alinha o texto no meio da célula verticalmente */
}

/* 2. Força a coluna de Ações a NUNCA quebrar a linha */
.table-container table td.actions {
    white-space: nowrap; /* Este é o comando mágico que impede a quebra de linha */
    width: 1%; /* Truque para fazer a coluna ocupar o menor espaço possível, mas sem quebrar */
}

/* 3. (BÔNUS) Corta textos muito longos com "..." para não estragar o layout */
.truncate-text {
    max-width: 250px; /* Largura máxima para a célula de texto */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
/* ESTILOS PARA OS BOTÕES DE IMPRESSÃO NO MODAL DE DETALHES */

.modal-print-actions {
    margin-top: 30px;
    padding-top: 20px;
    border-top: 1px solid var(--border-color);
    display: flex;
    gap: 15px;
    justify-content: center; /* Centraliza os botões */
}

.btn-modal-print {
    padding: 8px 20px; /* Botões um pouco menores */
    font-size: 0.9em;
    font-weight: 500;
    flex: 0 1 auto; /* Impede que os botões estiquem */
}
/* ========================================================== */
/* ESTILOS FINAIS P/ FRENTE DE CAIXA (COM LAYOUT EM GRID)     */

    /* Container geral para centralizar na tela */
    .caixa-container {
        max-width: 800px; /* Aumenta um pouco a largura para o layout de duas colunas */
        margin: 0 auto;
    }

    /* --- Formulário de Abertura (continua igual) --- */
    #caixa-fechado-view .caixa-form {
        max-width: 550px;
        margin: 0 auto;
        grid-template-columns: 1fr;
    }

    .caixa-form .form-group small {
        font-size: 0.8em;
        color: #888;
        margin-top: 8px;
    }
/* ========================================================== */
/* LAYOUT FINAL E ALINHADO P/ FECHAMENTO DE CAIXA LADO A LADO */
    .fechamento-grid-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px; 
    }

    /* Remove margens que possam interferir no alinhamento do grid */
    .fechamento-grid-container .caixa-form,
    .fechamento-grid-container .fechamento-resumo {
        margin: 0;
    }

    /* CORREÇÃO 1: Centraliza o conteúdo do bloco da direita verticalmente */
    .fechamento-resumo {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    /* CORREÇÃO 2: Faz o botão ocupar 100% do espaço das duas colunas */
    .fechamento-grid-container #btn-fechar-caixa {
    grid-column: 1 / -1;          /* Ocupa o espaço das duas colunas */
    width: 100%;                  /* Força a largura a 100% do espaço disponível */
    max-width: 100%;              /* Remove qualquer limite de largura máxima de outra regra */
    box-sizing: border-box;       /* Garante que o padding não interfira no tamanho final */
    }
/* --- Elementos (caixa de info, resumo, etc.) --- */
    .info-box {
        background-color: var(--panel-color);
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        border-left: 4px solid var(--success-color);
    }

    .info-box p {
        margin: 0 0 10px 0;
        font-size: 1.1em;
    }
    .info-box p:last-child {
        margin-bottom: 0;
    }

    .fechamento-resumo {
        background-color: #2a2a2a;
        border-radius: 8px;
        padding: 20px 25px;
        border: 1px solid var(--border-color);
    }

    .fechamento-resumo p {
        display: flex;
        justify-content: space-between;
        font-size: 1.1em;
        margin: 0;
        padding: 12px 0;
        border-bottom: 1px solid var(--border-color);
    }
    .fechamento-resumo p:last-child {
        border-bottom: none;
        padding-bottom: 0;
    }
    .fechamento-resumo p:first-child {
        padding-top: 0;
    }

    .fechamento-resumo strong {
        font-weight: 600;
        font-family: monospace, sans-serif;
        font-size: 1.2em;
    }

    .diferenca-caixa strong.sobra {
        color: var(--success-color);
    }

    .diferenca-caixa strong.falta {
        color: var(--error-color);
    }

    /* --- Sangrias e Suprimentos (continua igual) --- */
    .movimentacoes-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 40px;
    }
    .movimentacao-form {
        grid-template-columns: 1fr;
    }
    .movimentacao-form h3 {
        margin-top: 0;
        text-align: center;
        border-bottom: 1px solid var(--border-color);
        padding-bottom: 15px;
        margin-bottom: 15px;
    }
    .info-box-bloqueado {
        background-color: var(--panel-color);
        border-radius: 8px;
        padding: 40px 20px;
        margin-top: 20px;
        text-align: center;
        border: 1px dashed var(--border-color);
    }
    .info-box-bloqueado p {
        margin: 0;
        font-size: 1.2em;
        color: #888;
        font-weight: 500;
    }

/* ========================================================== */
/* ESTILOS PARA O BOTÃO FECHAR CAIXA                       */
    /* Garante que o botão de fechar caixa tenha a estrutura dos outros botões de ação */
    #btn-fechar-caixa {
        /* width: 100%; REMOVIDO - A classe btn-danger já cuida da largura */
        max-width: 500px; /* Garante que não estique demais */
        margin: auto; /* Centraliza o botão e adiciona espaçamento */
        padding: 15px;
        border-radius: 5px;
        border: none;
        color: white;
        font-size: 1.1em;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
    }

    #btn-fechar-caixa:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 15px rgba(220, 53, 69, 0.4);
    }
/* ========================================================== */
/* ESTILOS PARA A TELA DE SANGRIAS E SUPRIMENTOS            */

    .movimentacoes-container {
        display: grid;
        grid-template-columns: 1fr 1fr; /* Duas colunas de tamanho igual */
        gap: 40px;
    }

    .movimentacao-form {
        grid-template-columns: 1fr; /* Força os campos a ocuparem uma única coluna */
    }

    .movimentacao-form h3 {
        margin-top: 0;
        text-align: center;
        border-bottom: 1px solid var(--border-color);
        padding-bottom: 15px;
        margin-bottom: 15px;
    }

    .info-box-bloqueado {
        background-color: var(--panel-color);
        border-radius: 8px;
        padding: 40px 20px;
        margin-top: 20px;
        text-align: center;
        border: 1px dashed var(--border-color);
    }

    .info-box-bloqueado p {
        margin: 0;
        font-size: 1.2em;
        color: #888;
        font-weight: 500;
    }
/* ========================================================== */
/* ESTILOS PARA BOTÕES DE SANGRIAS E SUPRIMENTOS (COM CLASSES) */

    /* Regra de ESTRUTURA para ambos os botões */
    .movimentacao-form .btn-danger,
    .movimentacao-form .btn-success {
        grid-column: 1 / -1;
        width: 100%;
        padding: 15px;
        border-radius: 5px;
        border: none;
        color: white;
        font-size: 1.1em;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
    }

    .movimentacao-form .btn-danger:hover,
    .movimentacao-form .btn-success:hover {
        transform: translateY(-3px);
    }

    /* Regra de COR para o novo .btn-success */
    .btn-success {
        background-color: var(--success-color);
    }
    .btn-success:hover {
        background-color: #218838; /* Verde mais escuro */
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.4);
    }

    /* Regra de COR para o .btn-danger (para garantir a consistência) */
    .btn-danger {
        background-color: var(--error-color);
    }
    .btn-danger:hover {
        background-color: #c82333; /* Vermelho mais escuro */
        box-shadow: 0 4px 15px rgba(220, 53, 69, 0.4);
    }
/* ========================================================== */
/* ESTILOS PARA O RESUMO DE FECHAMENTO DE CAIXA             */
    .fechamento-resumo {
        background-color: #2a2a2a;
        border-radius: 8px;
        padding: 20px 25px;
        margin-top: -10px; /* Puxa para mais perto do formulário de cima */
        margin-bottom: 20px;
        border: 1px solid var(--border-color);
    }

    .fechamento-resumo p {
        display: flex;
        justify-content: space-between;
        font-size: 1.1em;
        margin: 0;
        padding: 12px 0;
        border-bottom: 1px solid var(--border-color);
    }

    .fechamento-resumo p:last-child {
        border-bottom: none;
        padding-bottom: 0;
    }

    .fechamento-resumo p:first-child {
        padding-top: 0;
    }

    .fechamento-resumo strong {
        font-weight: 600;
        font-family: monospace, sans-serif; /* Fonte monoespaçada para números */
        font-size: 1.2em;
    }

    #btn-fechar-caixa {
        width: 100%;
        max-width: 500px; /* Mesma largura máxima do formulário */
    }

    /* Classes de cor para a diferença do caixa */
    .diferenca-caixa strong.sobra {
        color: var(--success-color);
    }

    .diferenca-caixa strong.falta {
        color: var(--error-color);
    }
/* ========================================================== */
/* ESTILOS PARA O NOVO SUBMENU COM DROPDOWNS                */
/* ========================================================== */

/* Alinha os itens principais do submenu (Análise, Operações, etc.) */
.sub-nav .sub-nav-item {
    position: relative; /* Essencial para o posicionamento do dropdown */
}

/* Estiliza o link principal que abre o dropdown */
.sub-nav-master {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    border-radius: 8px;
    color: var(--text-color);
    text-decoration: none;
    font-weight: 500;
    transition: all 0.2s ease-in-out;
}

.sub-nav-master:hover {
    background-color: #333;
}

/* Estiliza a setinha do dropdown */
.sub-nav-master .arrow {
    font-size: 0.7em;
    transition: transform 0.2s ease-in-out;
}

/* Gira a setinha quando o menu está aberto */
.sub-nav-item.open .sub-nav-master .arrow {
    transform: rotate(180deg);
}

/* Quando o item principal está ativo, muda a cor */
.sub-nav-item.active .sub-nav-master {
    background: var(--primary-gradient);
    color: white;
}

/* Container do menu dropdown (o que abre e fecha) */
.dropdown-menu {
    display: none; /* Começa escondido */
    position: absolute;
    top: 110%; /* Aparece um pouco abaixo do botão principal */
    left: 0;
    z-index: 1000;
    background-color: var(--panel-color);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    min-width: 220px; /* Largura mínima do dropdown */
    box-shadow: 0 8px 16px rgba(0,0,0,0.3);
    overflow: hidden; /* Garante que os cantos arredondados funcionem nos links */
}

/* Mostra o menu quando a classe .open é adicionada via JS */
.sub-nav-item.open .dropdown-menu {
    display: block;
}

/* Estiliza os links dentro do dropdown */
.dropdown-menu .sub-nav-link {
    display: block;
    width: 100%;
    box-sizing: border-box;
    border-bottom: 1px solid var(--border-color);
}

.dropdown-menu .sub-nav-link:last-child {
    border-bottom: none; /* Remove a borda do último item */
}
/* ========================================================== */
/* AJUSTE VISUAL PARA FILTROS (ALINHAMENTO E ESPAÇAMENTO REFINADO) */
/* ========================================================== */

/* 1. Container geral dos filtros: alinha itens pelo centro e mantém espaçamento */
.filters-container {
    padding: 10px 20px; /* Padding levemente ajustado */
    gap: 25px; /* MAIOR ESPAÇO entre o grupo de data e o de botões */
    align-items: center; /* ALINHA OS ITENS PELO CENTRO VERTICALMENTE */
    flex-wrap: nowrap; /* Impede quebra de linha */
    justify-content: flex-start;
}

/* 2. Grupo de Data: Garante que label e inputs fiquem em colunas, mas o grupo alinha */
.filters-container .form-group {
    display: flex;
    flex-direction: column; /* Label acima do input */
    gap: 5px; /* Espaço entre label e o input/botoes */
    white-space: nowrap;
}

.filters-container .form-group label {
    font-size: 0.8em; /* Rótulo um pouco maior para melhor leitura */
    margin-bottom: 0;
}

/* 3. Inputs de Data: Altura e padding refinados */
.filters-container .date-range {
    display: flex;
    align-items: center;
    gap: 8px; /* Espaço entre inputs e 'até' */
}

.filters-container .date-range input {
    width: 130px; /* Largura um pouco maior para facilitar seleção */
    height: 34px; /* ALTURA FIXA para alinhar com os botões */
    padding: 6px 10px; /* Padding para centralizar o texto */
    font-size: 0.9em; /* Fonte um pouco maior */
    box-sizing: border-box;
}

.filters-container .date-range span {
    font-size: 0.8em; /* Tamanho do 'até' */
    white-space: nowrap;
}

/* 4. Botões de Filtro Rápido: Altura e padding alinhados com os inputs de data */
.filters-container .quick-filters {
    display: flex;
    gap: 15px; /* Espaço entre os botões */
    flex-wrap: nowrap;
}

.filters-container .quick-filters .btn-secondary {
    height: 34px; /* ALTURA FIXA idêntica aos inputs de data */
    padding: 6px 10px; /* Padding para centralizar o texto */
    font-size: 0.85em; /* Fonte ajustada */
    line-height: 1;
    white-space: nowrap;
}
/* ========================================================== */
/* ESTILOS PARA AS ABAS DA TELA DE ORÇAMENTOS (CORREÇÃO)    */
/* ========================================================== */
.orcamento-view {
    display: none; /* Garante que ambas as abas comecem escondidas */
}

.orcamento-view.active {
    display: block; /* Mostra APENAS a aba que estiver com a classe 'active' */
}
/* Estilos para as tags de status na lista de orçamentos */
.status-tag {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8em;
    font-weight: 600;
    color: white;
    white-space: nowrap;
}
.status-pendente { background-color: #ffc107; color: #333; }
.status-convertido { background-color: var(--success-color); }
.status-expirado { background-color: #6c757d; }
.status-cancelado { background-color: var(--error-color); }
/* ========================================================== */
/* ESTILOS GLOBAIS PARA BARRA DE ROLAGEM DE TABELAS */
/* ========================================================== */
.table-container::-webkit-scrollbar {
    width: 10px;
}
.table-container::-webkit-scrollbar-track {
    background: #2a2a2a;
    border-radius: 5px;
}
.table-container::-webkit-scrollbar-thumb {
    background: #444;
    border-radius: 5px;
}
.table-container::-webkit-scrollbar-thumb:hover {
    background: #555;
}


style.css
/* Configurações Globais e Cores */
:root {
    --bg-color: #121212;
    --panel-color: #1E1E1E;
    --text-color: #E0E0E0;
    --primary-gradient: linear-gradient(90deg, #FF007A, #FF5F1F);
    --border-color: #444;
    --success-color: #28a745;
    --error-color: #dc3545;
}

body {
    font-family: 'Poppins', sans-serif;
    background-color: var(--bg-color);
    color: var(--text-color);
    margin: 0;
    padding: 20px;
    height: 100vh;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
}

/* Layout Principal */
.pos-container {
    display: grid;
    grid-template-columns: 350px 1fr 350px;
    grid-template-rows: 1fr;
    gap: 20px;
    flex-grow: 1;
    overflow: hidden;
}

/* Ajustes nos painéis para controle de altura e rolagem */
.input-panel, .items-panel, .summary-panel {
    background-color: var(--panel-color);
    border-radius: 8px;
    padding: 25px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.4);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    min-height: 0;
}

/* Área de conteúdo que deve rolar */
/* Unifica as áreas de conteúdo com rolagem */
.panel-content-scrollable, 
.table-container {
    flex-grow: 1;
    overflow-y: auto;
    padding-right: 15px;
    margin-right: -15px;
    scrollbar-width: thin;
    scrollbar-color: #444 #2a2a2a;
}

/* Unifica a estilização da barra de rolagem para Webkit */
.panel-content-scrollable::-webkit-scrollbar, 
.table-container::-webkit-scrollbar { 
    width: 10px; 
    height: 10px; 
}

.panel-content-scrollable::-webkit-scrollbar-track, 
.table-container::-webkit-scrollbar-track { 
    background: #2a2a2a; 
    border-radius: 5px; 
}

.panel-content-scrollable::-webkit-scrollbar-thumb, 
.table-container::-webkit-scrollbar-thumb { 
    background: #444; 
    border-radius: 5px; 
}

.panel-content-scrollable::-webkit-scrollbar-thumb:hover, 
.table-container::-webkit-scrollbar-thumb:hover { 
    background: #555; 
}


/* Garante que os botões no final não encolham */
.input-panel .goto-admin, .summary-panel .btn-primary {
    flex-shrink: 0;
    margin-top: 20px;
}

h1, h2 {
    margin-top: 0;
    border-bottom: 2px solid var(--border-color);
    padding-bottom: 10px;
    font-weight: 600;
}
.logo-header { text-align: center; margin-bottom: 20px; }
.form-group { margin-bottom: 15px; }
.form-group label { display: block; margin-bottom: 8px; font-size: 0.9em; font-weight: 300; }
.form-group input, .form-group select { width: 100%; padding: 12px; background-color: #333; border: 1px solid var(--border-color); border-radius: 5px; color: var(--text-color); font-size: 1em; box-sizing: border-box; }
.form-group input:focus, .form-group select:focus { outline: none; border-color: #FF5F1F; }
.goto-admin { display: block; width: 100%; margin-top: auto; padding: 12px; border-radius: 5px; border: 1px solid var(--border-color); background-color: #333; color: #aaa; text-align: center; text-decoration: none; font-weight: 600; box-sizing: border-box; transition: all 0.2s; }
.goto-admin:hover { background-color: #444; color: white; border-color: #555; transform: translateY(-2px); }
.product-entry-group { display: flex; gap: 10px; align-items: flex-end; }
.product-search { flex-grow: 1; }
.quantity-input { width: 80px; }
.section-divider { font-size: 0.8em; text-transform: uppercase; color: #888; margin: 20px 0 10px; padding-bottom: 5px; border-bottom: 1px solid var(--border-color); }

/* Painel de Itens */
.items-panel { grid-column: 2 / 3; }
table { width: 100%; border-collapse: collapse; }
th, td { padding: 15px; text-align: left; border-bottom: 1px solid var(--border-color); }
thead { position: sticky; top: 0; background-color: var(--panel-color); }
th { font-weight: 600; }
.remove-btn { background: none; border: none; color: #ff4d4d; cursor: pointer; font-size: 1.2em; }
tr.discount-item td { color: var(--success-color); font-style: italic; }

/* Painel de Resumo */
.summary-panel { justify-content: space-between; }
.summary-line, .summary-total { display: flex; justify-content: space-between; align-items: center; font-size: 1.1em; margin-bottom: 15px; }
.summary-person { font-size: 0.9em; color: #ccc; }
.summary-person span:last-child { font-weight: bold; }
.summary-total { font-size: 1.8em; font-weight: 700; border-top: 2px solid var(--border-color); padding-top: 15px; }
.summary-total span:last-child { color: #FF5F1F; }
.cupom-group { display: flex; }
.cupom-group input { border-radius: 5px 0 0 5px; }
.cupom-group button { border: none; background: #555; color: white; padding: 0 15px; border-radius: 0 5px 5px 0; cursor: pointer; }
.cupom-group button:hover { background: #666; }
#cupom-status { font-size: 0.8em; margin-top: 5px; display: block; }
#cupom-status.success { color: var(--success-color); }
#cupom-status.error { color: var(--error-color); }

/* Botões */
.btn-primary, .btn-add, .btn-secondary { display: block; width: 100%; padding: 15px; border: none; border-radius: 5px; color: white; font-size: 1.2em; font-weight: 700; cursor: pointer; transition: all 0.2s; box-sizing: border-box; }
.btn-primary { padding: 20px; font-size: 1.3em; background: var(--primary-gradient); }
.btn-add { background: var(--primary-gradient); margin-bottom: 10px; }
.btn-secondary { background-color: #555; }
.btn-primary:hover, .btn-add:hover { transform: translateY(-3px); box-shadow: 0 6px 20px rgba(255, 95, 31, 0.4); }
.btn-secondary:hover { transform: translateY(-3px); background-color: #666; }
button#add-manual-desc-btn { background-color: var(--success-color); }
button#add-manual-desc-btn:hover { background-color: #2ebf4f; box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4); }


/* Exemplo para style.css */
@media (max-width: 1200px) {
    .pos-container {
        grid-template-columns: 300px 1fr 300px; /* Diminui um pouco */
    }
}

@media (max-width: 992px) {
    .pos-container {
        /* Transforma em uma única coluna */
        grid-template-columns: 1fr;
        grid-template-rows: auto 1fr auto; /* Define as linhas */
        overflow-y: auto;
    }
    .items-panel {
        /* O painel de itens deve vir primeiro na ordem visual */
        grid-row: 2 / 3;
    }
    .input-panel {
        grid-row: 1 / 2;
    }
    .summary-panel {
        grid-row: 3 / 4;
    }
}
/* --- ESTILOS DO MODAL DE PÓS-VENDA (AJUSTE VERTICAL) --- */

/* O container agora usa flexbox com quebra de linha */
.post-sale-actions {
    display: flex;
    flex-wrap: wrap;          /* Permite que os botões quebrem para a linha de baixo */
    justify-content: center;  /* Centraliza os botões na horizontal */
    gap: 15px;                /* Espaço entre os botões de impressão */
    margin-top: 25px;
}

/* Estilo para os botões SECUNDÁRIOS (Imprimir) */
#btn-print-nf, #btn-print-garantia {
    flex-grow: 1; /* Faz os dois botões dividirem o espaço da linha de cima */
    padding: 12px;
    border-radius: 10px;
    border: 2px solid var(--border-color);
    background-color: transparent;
    color: var(--text-color);
    font-size: 1em;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
}

#btn-print-nf:hover, #btn-print-garantia:hover {
    background-color: #333;
    border-color: #555;
}

/* Estilo PRINCIPAL para o botão "Nova Venda" */
#btn-new-sale {
    width: 100%; /* Faz o botão ocupar toda a largura e ir para a linha de baixo */
    background: var(--primary-gradient);
    color: white;
    padding: 18px;
    border-radius: 12px;
    border: none;
    font-size: 1.2em;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.2s;
    /* A MÁGICA ESTÁ AQUI: */
    margin-top: 15px; /* Cria o espaçamento vertical para afastá-lo dos botões de cima */
}

#btn-new-sale:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(255, 95, 31, 0.4);
}
/* ========================================================== */
/* CENTRALIZAÇÃO DO MODAL DE PAGAMENTO                      */
/* ========================================================== */

#payment-modal .modal-content {
    text-align: center; /* 1. Centraliza todo o texto e conteúdo do modal */
}

/* 2. Garante que o formulário de "Valor Recebido" (para pagamento em dinheiro)
      continue com o alinhamento à esquerda, que é mais natural para formulários. */
#payment-modal .form-group {
    text-align: left;
}
javascript

script.JS
document.addEventListener('DOMContentLoaded', () => {
   
    // --- CARREGANDO DADOS DO LOCALSTORAGE ---
    function loadData(key) {
        const data = localStorage.getItem(key);
        
        // Se não houver nada salvo, retorna nulo.
        if (!data) {
            return null;
        }

        // Tenta converter o texto para objeto.
        try {
            return JSON.parse(data);
        } 
        // Se der erro na conversão...
        catch (error) {
            // Mostra um aviso no console para você (o desenvolvedor) saber do problema.
            console.error(`ERRO: Dado corrompido encontrado no localStorage para a chave: "${key}"`);
            
            // Remove o dado ruim para não causar problemas no futuro.
            localStorage.removeItem(key);
            
            // Retorna nulo, como se não houvesse nada salvo.
            return null;
        }
    }

    const STORAGE_KEYS = {
 		products: 'amanditaGames_products',
 		clients: 'amanditaGames_clients',
 		sellers: 'amanditaGames_sellers',
        coupons: 'amanditaGames_coupons', // <-- ADICIONADO
 		sales: 'amanditaGames_sales',
        orcamentos: 'amanditaGames_orcamentos'
 	};

    // BANCOS DE DADOS
    // Carrega os produtos salvos pelo admin
    const dbOrcamentosArray = loadData(STORAGE_KEYS.orcamentos) || [];
    const dbProdutosArray = loadData(STORAGE_KEYS.products) || [];
    const mockDatabase = dbProdutosArray.reduce((obj, item) => {
        obj[item.codigo.toUpperCase()] = {
            codigo: item.codigo, // <== ADICIONE ESTA LINHA
            nome: item.nome,
            preco: parseFloat(item.precoVenda),
            serial: item.serial,
            garantia: item.garantia
        };
        return obj;
    }, {});

    // ATUALIZADO: Carrega os clientes salvos pelo admin
    const dbClientesArray = loadData(STORAGE_KEYS.clients) || [];
    const mockClients = dbClientesArray.reduce((obj, item) => {
        obj[item.codigo.toUpperCase()] = item;
        return obj;
    }, {});

    // ATUALIZADO: Carrega os vendedores salvos pelo admin
 	const dbVendedoresArray = loadData(STORAGE_KEYS.sellers) || [];
 	const mockSellers = dbVendedoresArray.reduce((obj, item) => {
 		obj[item.codigo.toUpperCase()] = item;
 		return obj;
 	}, {});

 	// ATUALIZADO: Carrega os cupons salvos pelo admin
 	const dbCuponsArray = loadData(STORAGE_KEYS.coupons) || [];
 	const mockCoupons = dbCuponsArray.reduce((obj, item) => {
 		obj[item.codigo.toUpperCase()] = {
 			type: item.tipo,
 			value: parseFloat(item.valor),
 			// A lógica de usos restantes precisaria de um controle mais avançado,
 			// mas para o protótipo, vamos assumir que todos estão disponíveis.
 			remaining: parseInt(item.usos) 
 		};
 		return obj;
 	}, {});
    

    // ELEMENTOS DO DOM (PDV)
    const clienteInput = document.getElementById('cliente-input');
    const vendedorInput = document.getElementById('vendedor-input');
    const produtoInput = document.getElementById('produto-input');
    const quantidadeInput = document.getElementById('quantidade-input');
    const addProductBtn = document.getElementById('add-product-btn');
    const cartItemsContainer = document.getElementById('cart-items');
    const subtotalEl = document.getElementById('subtotal');
    const totalDescontosEl = document.getElementById('descontos-total');
    const totalGeralEl = document.getElementById('total-geral');
    const finishSaleBtn = document.getElementById('finish-sale-btn');
    const summaryClienteEl = document.getElementById('summary-cliente');
    const summaryVendedorEl = document.getElementById('summary-vendedor');
    const cupomInput = document.getElementById('cupom-input');
    const applyCupomBtn = document.getElementById('apply-cupom-btn');
    const cupomStatusEl = document.getElementById('cupom-status');
    const paymentMethodEl = document.getElementById('payment-method');
    const manualDescDescEl = document.getElementById('manual-desc-desc');
    const manualDescValorEl = document.getElementById('manual-desc-valor');
    const addManualDescBtn = document.getElementById('add-manual-desc-btn');

    // ELEMENTOS DO DOM (MODAIS)
    const paymentModal = document.getElementById('payment-modal');
    const modalTotalVendaEl = document.getElementById('modal-total-venda');
    const modalPaymentMethodEl = document.getElementById('modal-payment-method');
    const paymentInputArea = document.getElementById('payment-input-area');
    const btnConfirmPayment = document.getElementById('btn-confirm-payment');
    const paymentModalCloseButton = paymentModal.querySelector('.close-button');
    const postSaleModal = document.getElementById('post-sale-modal');
    const postSaleModalCloseButton = postSaleModal.querySelector('.close-button');
    const btnPrintNf = document.getElementById('btn-print-nf');
    const btnPrintGarantia = document.getElementById('btn-print-garantia');
    const btnNewSale = document.getElementById('btn-new-sale');
    const docPreviewModal = document.getElementById('document-preview-modal');
    const docContentEl = document.getElementById('document-content');
    const btnClosePreview = document.getElementById('btn-close-preview');
    const btnPrintDocument = document.getElementById('btn-print-document');
    const docPreviewModalCloseButton = docPreviewModal.querySelector('.close-button');

    // ESTADO DA APLICAÇÃO
    let cart = [];
    let appliedCoupon = null;
    let finalTotal = 0;
    let lastSaleData = {};
    let currentClient = null;
    let currentSeller = null;
    // ADICIONADA ESTAS DUAS LINHAS ABAIXO
    let subtotal = 0;
    let paymentDiscount = 0;
    // ADICIONE ESTA FUNÇÃO AUXILIAR AQUI
    
    // --- FUNÇÕES DE LÓGICA DO PDV ---
    const addProductToCart = () => { const productCode = produtoInput.value.toUpperCase(); const quantidade = parseInt(quantidadeInput.value); if (!mockDatabase[productCode]) { alert("Produto não encontrado!"); return; } if (isNaN(quantidade) || quantidade <= 0) { alert("Quantidade inválida."); return; } const existingProduct = cart.find(item => item.codigo === productCode && !item.isDiscount); if (existingProduct) { existingProduct.quantidade += quantidade; } else { cart.push({ codigo: productCode, nome: mockDatabase[productCode].nome, preco: mockDatabase[productCode].preco, quantidade: quantidade, isDiscount: false, }); } produtoInput.value = ""; quantidadeInput.value = "1"; produtoInput.focus(); updateUI(); };
    const addManualDiscount = () => { const description = manualDescDescEl.value; const value = parseFloat(manualDescValorEl.value.replace(',', '.')) || 0; if (!description || value <= 0) { alert("Por favor, preencha a descrição e um valor válido para o desconto."); return; } cart.push({ codigo: 'DESC', nome: description.toUpperCase(), preco: -value, quantidade: 1, isDiscount: true, }); manualDescDescEl.value = ""; manualDescValorEl.value = ""; updateUI(); };
    const applyCoupon = () => { const code = cupomInput.value.toUpperCase(); const coupon = mockCoupons[code]; cupomStatusEl.textContent = ""; appliedCoupon = null; if (!coupon) { cupomStatusEl.textContent = "Cupom inválido."; cupomStatusEl.className = 'error'; } else if (coupon.remaining <= 0) { cupomStatusEl.textContent = "Este cupom já foi totalmente resgatado."; cupomStatusEl.className = 'error'; } else { appliedCoupon = { code, ...coupon }; cupomStatusEl.textContent = `Cupom "${code}" aplicado! (-${formatCurrency(coupon.value)})`; cupomStatusEl.className = 'success'; } updateUI(); };
    const removeItemFromCart = (index) => { cart.splice(index, 1); updateUI(); };
   
    // SUBSTITUA SUA FUNÇÃO updateUI INTEIRA POR ESTA:

    const updateUI = () => {
        cartItemsContainer.innerHTML = "";
        // AÇÃO 1: A variável 'subtotal' não é mais calculada aqui dentro.
        // Ela agora é a nossa variável global.

        cart.forEach((item, index) => { 
            const totalItem = item.preco * item.quantidade; 
            // AÇÃO 2: A linha 'subtotal += totalItem' foi REMOVIDA daqui.
            const row = document.createElement('tr'); 
            if (item.isDiscount) row.className = 'discount-item'; 
            row.innerHTML = `<td>${item.codigo}</td><td>${toTitleCase(item.nome)}</td><td>${formatCurrency(item.preco)}</td><td>${item.quantidade}</td><td>${formatCurrency(totalItem)}</td><td><button class="remove-btn" data-index="${index}">✖</button></td>`; 
            cartItemsContainer.appendChild(row); 
        });
        
        let totalDescontos = cart.filter(i => i.isDiscount).reduce((acc, item) => acc + Math.abs(item.preco), 0);
        
        let couponDiscountValue = 0;
        if (appliedCoupon) { couponDiscountValue = appliedCoupon.value; }
        
        paymentDiscount = 0; 
        
        // AÇÃO 3: Aqui calculamos o subtotal SOMENTE dos produtos e guardamos na nossa variável global.
        subtotal = cart.filter(i => !i.isDiscount).reduce((acc, item) => acc + (item.preco * item.quantidade), 0);
        if (paymentMethodEl.value === 'pix' && subtotal > 0) { paymentDiscount = subtotal * 0.05; }
        
        totalDescontos += couponDiscountValue + paymentDiscount;

        // AÇÃO 4: O Total Geral agora é o Subtotal (só de produtos) MENOS o total de todos os descontos.
        finalTotal = subtotal - totalDescontos;
        
        subtotalEl.textContent = formatCurrency(subtotal); // Agora exibe o subtotal correto (só produtos)
        totalDescontosEl.textContent = formatCurrency(-totalDescontos);
        totalGeralEl.textContent = formatCurrency(finalTotal);
        
        currentClient = mockClients[clienteInput.value.toUpperCase()] || null;
        currentSeller = mockSellers[vendedorInput.value.toUpperCase()] || null;
        summaryClienteEl.textContent = currentClient ? toTitleCase(currentClient.nome) : "Consumidor Padrão";
        summaryVendedorEl.textContent = currentSeller ? toTitleCase(currentSeller.nome) : "Vendedor Padrão";
    };

    function openPaymentModal() { if (cart.length === 0) { alert("Nenhum item no carrinho!"); return; } updateUI(); const paymentMethod = paymentMethodEl.options[paymentMethodEl.selectedIndex].text; modalTotalVendaEl.textContent = formatCurrency(finalTotal); modalPaymentMethodEl.textContent = paymentMethod; paymentInputArea.innerHTML = ''; switch (paymentMethodEl.value) { case 'dinheiro': paymentInputArea.innerHTML = `<div class="form-group"><label for="valor-recebido">Valor Recebido (R$)</label><input type="number" id="valor-recebido" placeholder="50.00" step="0.01" min="0"></div><div class="troco-display"><span>Troco</span><strong id="troco-valor">R$ 0,00</strong></div>`; document.getElementById('valor-recebido').addEventListener('input', calculateChange); break; case 'pix': paymentInputArea.innerHTML = `<div class="pix-area"><p>Escaneie o QR Code para pagar</p><img src="https://i.imgur.com/g8fG1v1.png" alt="QR Code Falso"><p>amanda-games-pix@email.com</p></div>`; break; default: paymentInputArea.innerHTML = `<p style="text-align:center; font-size: 1.1em;">Por favor, insira o cartão na maquininha.</p>`; break; } paymentModal.style.display = 'block'; }
    function calculateChange() { const valorRecebidoInput = document.getElementById('valor-recebido'); const trocoValorEl = document.getElementById('troco-valor'); const valorRecebido = parseFloat(valorRecebidoInput.value.replace(',', '.')) || 0; const finalTotalInCents = Math.round(finalTotal * 100); const valorRecebidoInCents = Math.round(valorRecebido * 100); if (valorRecebidoInCents >= finalTotalInCents) { const trocoInCents = valorRecebidoInCents - finalTotalInCents; trocoValorEl.textContent = formatCurrency(trocoInCents / 100); } else { trocoValorEl.textContent = formatCurrency(0); } }

    function confirmPayment() {
        
        let valorRecebido = 0;
        let troco = 0;
        if (paymentMethodEl.value === 'dinheiro') {
            const valorRecebidoInput = document.getElementById('valor-recebido');
            valorRecebido = parseFloat(valorRecebidoInput.value.replace(',', '.')) || 0;
            if (valorRecebido >= finalTotal) { troco = valorRecebido - finalTotal; }
        }
        lastSaleData = {
            cliente: currentClient || { nome: 'CONSUMIDOR PADRÃO', cpf: '', telefone: '', rua: '', numero: '', bairro: '', cidade: '', uf: '' },
            vendedor: currentSeller || { nome: 'VENDEDOR PADRÃO' },
            itens: [...cart],
            total: finalTotal,
            subtotal: subtotal,
            paymentMethod: paymentMethodEl.options[paymentMethodEl.selectedIndex].text,
            valorRecebido: valorRecebido,
            troco: troco,
            date: new Date(),
            discounts: {
                manualItems: cart.filter(i => i.isDiscount),
                couponCode: appliedCoupon ? appliedCoupon.code : null,
                couponValue: appliedCoupon ? appliedCoupon.value : 0,
                paymentValue: paymentDiscount
            }
        };
        lastSaleData.recibo = Date.now().toString().slice(-6);
        const historicoVendas = loadData(STORAGE_KEYS.sales) || [];
        historicoVendas.push(lastSaleData);
        saveData(STORAGE_KEYS.sales, historicoVendas);
          
        paymentModal.style.display = 'none'; 
        postSaleModal.style.display = 'block';
    }


    // DEPOIS
function showPreview(type) {
    docContentEl.innerHTML = generateDocumentHTML(type, lastSaleData, Object.values(mockDatabase));
    postSaleModal.style.display = 'none';
    docPreviewModal.style.display = 'block';
}

    function resetForNextSale() {
        if (appliedCoupon) { mockCoupons[appliedCoupon.code].remaining--; }
        cart = [];
        appliedCoupon = null;
        lastSaleData = {};
        cupomInput.value = "";
        cupomStatusEl.textContent = "";
        clienteInput.value = "";
        vendedorInput.value = "";
        postSaleModal.style.display = 'none';
        docPreviewModal.style.display = 'none';
        updateUI();
    }

    // --- EVENT LISTENERS ---
    addProductBtn.addEventListener('click', addProductToCart);
    produtoInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') quantidadeInput.focus(); });
    quantidadeInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') addProductToCart(); });
    addManualDescBtn.addEventListener('click', addManualDiscount);
    applyCupomBtn.addEventListener('click', applyCoupon);
    paymentMethodEl.addEventListener('change', updateUI);
    clienteInput.addEventListener('input', updateUI);
    vendedorInput.addEventListener('input', updateUI);
    cartItemsContainer.addEventListener('click', (e) => { if(e.target.classList.contains('remove-btn')){ removeItemFromCart(e.target.dataset.index); } });
    
    finishSaleBtn.addEventListener('click', openPaymentModal);
    btnConfirmPayment.addEventListener('click', confirmPayment);
    paymentModalCloseButton.onclick = () => { paymentModal.style.display = 'none'; };
    postSaleModalCloseButton.onclick = () => { resetForNextSale(); };

    btnPrintNf.addEventListener('click', () => showPreview('nf'));
    btnPrintGarantia.addEventListener('click', () => showPreview('garantia'));
    btnNewSale.addEventListener('click', resetForNextSale);
    btnClosePreview.addEventListener('click', () => { docPreviewModal.style.display = 'none'; postSaleModal.style.display = 'block'; });
    btnPrintDocument.addEventListener('click', () => window.print());
    docPreviewModalCloseButton.onclick = () => {
        docPreviewModal.style.display = 'none';
        postSaleModal.style.display = 'block'; // Adicionamos esta linha
    };
    
    window.addEventListener('afterprint', () => {
        docPreviewModal.style.display = 'none';
        postSaleModal.style.display = 'block';
    });
    function checkForQuoteConversion() {
        const quoteId = localStorage.getItem('quoteToConvert');
        if (quoteId) {
            const quote = dbOrcamentosArray.find(o => o.id === quoteId);
            if (quote) {
                // Limpa o carrinho atual
                cart = [];
                // Adiciona os itens do orçamento ao carrinho
                quote.itens.forEach(item => {
                    cart.push({
                        codigo: item.codigo,
                        nome: item.nome,
                        preco: item.preco,
                        quantidade: item.quantidade,
                        isDiscount: false,
                    });
                });

                // Preenche o cliente, tratando o caso de ser avulso
                if (quote.cliente && quote.cliente.codigo) {
                    clienteInput.value = quote.cliente.codigo;
                } else if (quote.cliente && quote.cliente.nome) {
                    clienteInput.value = ''; // Limpa o campo de código
                    // Define o cliente avulso diretamente
                    currentClient = { nome: quote.cliente.nome };
                }
            }
            // Limpa a memória para não carregar de novo na próxima vez
            localStorage.removeItem('quoteToConvert');
        }
    }
    // Executa a verificação assim que a página carrega
    checkForQuoteConversion();
    
    // --- INICIALIZAÇÃO ---
    updateUI();
});
admin.JS
document.addEventListener('DOMContentLoaded', () => {

 // --- ELEMENTOS PRINCIPAIS DO DOM (DECLARADOS UMA SÓ VEZ AQUI) ---
    const mainContent = document.querySelector('.content'); // Declarado aqui em cima!
    const mainNavLinks = document.querySelectorAll('.sidebar .nav-link');
    const mainContentPanels = document.querySelectorAll('.content > .content-panel');
    const subNavLinks = document.querySelectorAll('.sub-nav-link');
    const subContentPanels = document.querySelectorAll('.sub-panel');

// ==========================================================
// LÓGICA DE NAVEGAÇÃO FINAL E UNIFICADA


    // Função ÚNICA e central para ativar qualquer sub-painel
    function activateSubPanel(clickedLink) {
        // Se for um link externo (como para o PDV), deixa ele funcionar
        if (!clickedLink.dataset.target) {
            return;
        }

        const targetId = clickedLink.dataset.target;

        // Encontra o painel PAI para trabalhar apenas dentro dele
        const parentPanel = clickedLink.closest('.content-panel');
        if (!parentPanel) return;

        // Limpa a seleção apenas dos links e painéis DENTRO do PAI
        parentPanel.querySelectorAll('.sub-nav-link').forEach(l => l.classList.remove('active'));
        parentPanel.querySelectorAll('.sub-panel').forEach(p => p.classList.remove('active'));

        // Ativa o link e o painel clicados
        clickedLink.classList.add('active');
        const activePanel = document.getElementById(targetId);
        if (activePanel) {
            activePanel.classList.add('active');
        }

        // Lógica para carregar dados específicos da aba, se necessário
        if (targetId === 'relatorios-dia-content') renderReports();
        if (targetId === 'historico-content') renderFunctions.historico();
    }
    
    // CORREÇÃO: Seleciona TODAS as barras de sub-navegação
    // ==========================================================
// SUBSTITUIÇÃO 1: NAVEGAÇÃO PRINCIPAL CORRIGIDA
// ==========================================================
// CORREÇÃO: Seleciona TODAS as barras de sub-navegação
    document.querySelectorAll('.sub-nav').forEach(nav => {
        nav.addEventListener('click', (e) => {
            // ESTA É A MUDANÇA: Se o clique veio de dentro de Orçamentos, este script para aqui.
            if (e.target.closest('#orcamentos-content')) {
                return;
            }

            const masterLink = e.target.closest('.sub-nav-master');
            const subLink = e.target.closest('.sub-nav-link');

            // Lógica para abrir/fechar os dropdowns
            if (masterLink) {
                e.preventDefault();
                const parentItem = masterLink.closest('.sub-nav-item');
                
                parentItem.parentElement.querySelectorAll('.sub-nav-item.has-dropdown').forEach(item => {
                    if (item !== parentItem) {
                        item.classList.remove('open');
                    }
                });

                parentItem.classList.toggle('open');
                return;
            }

            // Lógica para ativar a aba clicada
            if (subLink) {
                e.preventDefault();
                activateSubPanel(subLink);
                
                const parentDropdown = subLink.closest('.sub-nav-item.has-dropdown');
                if (parentDropdown) {
                    parentDropdown.classList.remove('open');
                }
            }
        });
    });
    // Listener para o menu principal (barra lateral)
    mainNavLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = link.dataset.target;

            // Ativa a aba principal correta
            mainNavLinks.forEach(l => l.classList.remove('active'));
            mainContentPanels.forEach(p => p.classList.remove('active'));
            link.classList.add('active');
            const activePanel = document.getElementById(targetId);
            if (activePanel) {
                activePanel.classList.add('active');
            }

            // Ativa a PRIMEIRA sub-aba do painel que acabamos de abrir
            const firstSubNavLink = activePanel.querySelector('.sub-nav-link');
            if (firstSubNavLink) {
                // Chama a função que ativa a sub-aba, em vez de simular clique
                activateSubPanel(firstSubNavLink);
            }
        });
    });

    const STORAGE_KEYS = {
        products: 'amanditaGames_products',
        categories: 'amanditaGames_categories',
        clients: 'amanditaGames_clients',
        sellers: 'amanditaGames_sellers',
        suppliers: 'amanditaGames_suppliers',
        coupons: 'amanditaGames_coupons',
        sales: 'amanditaGames_sales',
        caixas: 'amanditaGames_caixas',
        caixaMovimentacoes: 'amanditaGames_caixaMovimentacoes',
        orcamentos: 'amanditaGames_orcamentos'
    };

    document.querySelectorAll('.form-container').forEach(form => {
        form.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && e.target.tagName === 'INPUT') {
                e.preventDefault();
            }
        });
    });
// ==========================================================
// --- BANCOS DE DADOS E CONTADORES ---
    let dbCategorias = loadData(STORAGE_KEYS.categories) || [{
        id: 1,
        nome: 'JOGOS PS5'
    }, {
        id: 2,
        nome: 'ACESSÓRIOS'
    }];
    let dbProdutos = loadData(STORAGE_KEYS.products) || [];
    let dbVendedores = loadData(STORAGE_KEYS.sellers) || [];
    let dbClientes = loadData(STORAGE_KEYS.clients) || [];
    let dbFornecedores = loadData(STORAGE_KEYS.suppliers) || [];
    let dbCupons = loadData(STORAGE_KEYS.coupons) || [];
    let dbVendas = loadData(STORAGE_KEYS.sales) || [];
    let dbCaixas = loadData(STORAGE_KEYS.caixas) || [];
    let dbMovimentacoes = loadData(STORAGE_KEYS.caixaMovimentacoes) || [];
    let dbOrcamentos = loadData(STORAGE_KEYS.orcamentos) || [];

    let productCounter = dbProdutos.length ? Math.max(0, ...dbProdutos.map(p => parseInt(p.codigo.replace('P', '')))) + 1 : 1;
    let categoryCounter = dbCategorias.length ? Math.max(0, ...dbCategorias.map(c => c.id)) + 1 : 1;
    let clientCounter = dbClientes.length ? Math.max(0, ...dbClientes.map(c => parseInt(c.codigo.replace('C', '')))) + 1 : 1;
    let sellerCounter = dbVendedores.length ? Math.max(0, ...dbVendedores.map(v => parseInt(v.codigo.replace('V', '')))) + 1 : 1;
    let supplierCounter = dbFornecedores.length ? Math.max(0, ...dbFornecedores.map(f => parseInt(f.codigo.replace('F', '')))) + 1 : 1;
    let orcamentoCounter = dbOrcamentos.length ? Math.max(0, ...dbOrcamentos.map(o => parseInt(o.id.replace('ORC', '')))) + 1 : 1;

    let currentlyEditing = {
        id: null,
        type: null
    };
    let lastSaleData = {};
    let caixaAtual = null;
// ==========================================================
// --- ELEMENTOS GLOBAIS (MODAIS) ---
    const detailsModal = document.getElementById('details-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalBody = document.getElementById('modal-body');
    const detailsCloseButton = detailsModal.querySelector('.close-button');
    const confirmModal = document.getElementById('confirm-modal');
    const confirmModalText = document.getElementById('confirm-modal-text');
    const btnCancelDelete = document.getElementById('btn-cancel-delete');
    const btnConfirmDelete = document.getElementById('btn-confirm-delete');
    const confirmCloseButton = confirmModal.querySelector('.close-button');
    const postSaleModal = document.getElementById('post-sale-modal');
    const postSaleCloseButton = postSaleModal.querySelector('.close-button');
    const docPreviewModal = document.getElementById('document-preview-modal');
    const docPreviewCloseButton = docPreviewModal.querySelector('.close-button');
    const btnAbrirCaixa = document.getElementById('btn-abrir-caixa');
    const btnFecharCaixa = document.getElementById('btn-fechar-caixa');
    const valorFinalInput = document.getElementById('valor-final');
    const valorCalculadoEl = document.getElementById('valor-calculado-sistema'); 
    const diferencaCaixaEl = document.getElementById('diferenca-caixa');

// ==========================================================
// --- LÓGICA DOS MODAIS ---
    if (detailsCloseButton) {
        detailsCloseButton.onclick = () => {
            detailsModal.style.display = "none";
        }
    }
    if (btnCancelDelete) {
        btnCancelDelete.onclick = () => {
            confirmModal.style.display = "none";
        }
    }
    if (confirmCloseButton) {
        confirmCloseButton.onclick = () => {
            confirmModal.style.display = "none";
        }
    }
    if (postSaleCloseButton) {
        postSaleCloseButton.onclick = () => {
            postSaleModal.style.display = "none";
        }
    }
    if (docPreviewCloseButton) {
        docPreviewCloseButton.onclick = () => {
            docPreviewModal.style.display = "none";
        }
    }

    window.onclick = (event) => {
        if (event.target == detailsModal) {
            detailsModal.style.display = "none";
        }
        if (event.target == confirmModal) {
            confirmModal.style.display = "none";
        }
        if (event.target == postSaleModal) {
            postSaleModal.style.display = "none";
        }
        if (event.target == docPreviewModal) {
            docPreviewModal.style.display = "none";
        }
    }
// ==========================================================
// --- FUNÇÕES CRUD (Criar, Ler, Atualizar, Deletar) ---
    function showDetails(itemId, itemType) {
        let item;
        let detailsHtml = '';
        let title = 'Detalhes';
        let actionsHtml = ''; // Espaço para os botões de impressão

        if (itemType === 'venda') {
            item = dbVendas.find(v => v.recibo === itemId);
            // ADICIONE ESTA LINHA ABAIXO:
            lastSaleData = item; // Guardamos a venda encontrada na "memória" global
            if (item) {
                title = `Detalhes da Venda - Recibo Nº ${item.recibo}`;

                let itemsTable = item.itens.map(p => `<tr><td>${p.codigo}</td><td>${toTitleCase(p.nome)}</td><td>${p.quantidade}x</td><td>${formatCurrency(p.preco)}</td></tr>`).join('');

                detailsHtml = `
                    <p><strong>Cliente:</strong> ${toTitleCase(item.cliente.nome)}</p>
                    <p><strong>Vendedor:</strong> ${toTitleCase(item.vendedor.nome)}</p>
                    <p><strong>Data:</strong> ${new Date(item.date).toLocaleString('pt-BR')}</p>
                    <hr>
                    <h4>Itens:</h4>
                    <table class="doc-table">
                        <thead><tr><th>Cód.</th><th>Produto</th><th>Qtd.</th><th>Preço</th></tr></thead>
                        <tbody>${itemsTable}</tbody>
                    </table>
                    <hr>
                    <p><strong>Subtotal:</strong> ${formatCurrency(item.subtotal)}</p>
                    <p><strong>Total Descontos:</strong> ${formatCurrency(item.subtotal - item.total)}</p>
                    <p><strong>TOTAL PAGO:</strong> <span class="detail-highlight">${formatCurrency(item.total)}</span></p>
                `;

                // Adiciona os botões de impressão
                actionsHtml = `
                    <div class="modal-print-actions">
                        <button class="btn-secondary btn-modal-print" data-type="nf">📄 2ª Via Recibo</button>
                        <button class="btn-secondary btn-modal-print" data-type="garantia">📜 2ª Via Garantia</button>
                    </div>
                `;
            }
        } else {
            // A lógica antiga para os outros tipos de item (produto, cliente, etc.)
            // Esta parte é para garantir que a função "Ver" dos outros cadastros continue funcionando
            switch (itemType) {
                case 'orcamento':
                    item = dbOrcamentos.find(o => o.id === itemId);
                    if (item) {
                        title = `Detalhes do Orçamento - Nº ${item.id}`;

                        let itemsTable = item.itens.map(p => 
                            `<tr>
                                <td>${p.codigo}</td>
                                <td>${toTitleCase(p.nome)}</td>
                                <td>${p.quantidade}x</td>
                                <td>${formatCurrency(p.preco)}</td>
                            </tr>`
                        ).join('');

                        detailsHtml = `
                            <p><strong>Cliente:</strong> ${toTitleCase(item.cliente.nome)}</p>
                            <p><strong>Data de Criação:</strong> ${new Date(item.dataCriacao).toLocaleDateString('pt-BR')}</p>
                            <p><strong>Válido até:</strong> ${new Date(item.validade).toLocaleDateString('pt-BR')}</p>
                            <p><strong>Status:</strong> <span class="detail-highlight">${toTitleCase(item.status)}</span></p>
                            <hr>
                            <h4>Itens do Orçamento:</h4>
                            <table class="doc-table">
                                <thead><tr><th>Cód.</th><th>Produto</th><th>Qtd.</th><th>Preço</th></tr></thead>
                                <tbody>${itemsTable}</tbody>
                            </table>
                            <hr>
                            <p style="text-align:right; font-size: 1.5em;"><strong>TOTAL:</strong> <span class="detail-highlight">${formatCurrency(item.total)}</span></p>
                        `;
                    }
                    break;
                case 'produto':
                    item = dbProdutos.find(p => p.codigo === itemId);
                    if (item) {
                        const fornecedor = dbFornecedores.find(f => f.codigo === item.fornecedorCodigo);
                        const nomeFornecedor = fornecedor ? toTitleCase(fornecedor.nome) : 'Não informado';
                        const categoria = dbCategorias.find(c => String(c.id) === String(item.categoriaId));
                        const nomeCategoria = categoria ? toTitleCase(categoria.nome) : 'Sem categoria';
                        title = `Detalhes do Produto: ${toTitleCase(item.nome)}`;
                        detailsHtml = `<p><strong>Código Interno:</strong> ${item.codigo}</p><p><strong>Cód. Barras:</strong> ${item.barcode || 'N/A'}</p><p><strong>Nº de Série:</strong> ${item.serial || 'N/A'}</p><p><strong>Nome:</strong> ${toTitleCase(item.nome)}</p><p><strong>Condição:</strong> ${item.condicao}</p><p><strong>Garantia:</strong> ${item.garantia}</p><p><strong>Categoria:</strong> <span class="detail-highlight">${nomeCategoria}</span></p><p><strong>Plataforma:</strong> ${toTitleCase(item.plataforma)}</p><hr><p><strong>Preço de Custo:</strong> ${formatCurrency(parseFloat(item.precoCusto))}</p><p><strong>Preço de Venda:</strong> ${formatCurrency(parseFloat(item.precoVenda))}</p><p><strong>Fornecedor:</strong> ${nomeFornecedor} (${item.fornecedorCodigo || 'N/A'})</p><hr><p><strong>Estoque Atual:</strong> ${item.estoque} unidades</p><p><strong>Estoque Mínimo:</strong> ${item.estoqueMinimo} unidades</p><p><strong>Localização:</strong> ${toTitleCase(item.localizacao)}</p><hr><p><strong>Data de Lançamento:</strong> ${item.lancamento ? new Date(item.lancamento).toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A'}</p><p><strong>Tags:</strong> ${toTitleCase(item.tags)}</p>`;
                    }
                    break;
                // Os outros cases (categoria, cliente, etc.) continuam aqui...
                case 'categoria':
                    item = dbCategorias.find(c => c.id == itemId);
                    if (item) {
                        title = `Detalhes da Categoria: ${toTitleCase(item.nome)}`;
                        detailsHtml = `<p><strong>ID:</strong> ${item.id}</p><p><strong>Nome:</strong> ${toTitleCase(item.nome)}</p><p><strong>Descrição:</strong> ${item.descricao || 'Nenhuma'}</p>`;
                    }
                    break;
                case 'cliente':
                    item = dbClientes.find(c => c.codigo === itemId);
                    if (item) {
                        title = `Detalhes do Cliente: ${toTitleCase(item.nome)}`;
                        detailsHtml = `<p><strong>Código:</strong> ${item.codigo}</p><p><strong>Nome:</strong> ${toTitleCase(item.nome)}</p><p><strong>CPF:</strong> ${item.cpf}</p><p><strong>Telefone:</strong> ${item.telefone}</p><p><strong>E-mail:</strong> ${item.email}</p><p><strong>Endereço:</strong> ${toTitleCase(item.rua)}, Nº ${item.numero} - ${toTitleCase(item.bairro)}, ${toTitleCase(item.cidade)}/${item.uf.toUpperCase()}</p><p><strong>CEP:</strong> ${item.cep}</p>`;
                    }
                    break;
                case 'vendedor':
                    item = dbVendedores.find(v => v.codigo === itemId);
                    if (item) {
                        title = `Detalhes do Vendedor: ${toTitleCase(item.nome)}`;
                        detailsHtml = `<p><strong>Código:</strong> ${item.codigo}</p><p><strong>Nome:</strong> ${toTitleCase(item.nome)}</p><p><strong>CPF:</strong> ${item.cpf}</p><p><strong>Telefone:</strong> ${item.telefone}</p><p><strong>E-mail:</strong> ${item.email}</p><p><strong>Endereço:</strong> ${toTitleCase(item.rua)}, Nº ${item.numero} - ${toTitleCase(item.bairro)}, ${toTitleCase(item.cidade)}/${item.uf.toUpperCase()}</p><p><strong>CEP:</strong> ${item.cep}</p>`;
                    }
                    break;
                case 'fornecedor':
                    item = dbFornecedores.find(f => f.codigo === itemId);
                    if (item) {
                        title = `Detalhes do Fornecedor: ${toTitleCase(item.nome)}`;
                        detailsHtml = `<p><strong>Código:</strong> ${item.codigo}</p><p><strong>Empresa:</strong> ${toTitleCase(item.nome)}</p><p><strong>CNPJ:</strong> ${item.cnpj}</p><p><strong>Contato:</strong> ${toTitleCase(item.contato)}</p><p><strong>Telefone:</strong> ${item.telefone}</p><p><strong>Endereço:</strong> ${toTitleCase(item.rua)}, Nº ${item.numero} - ${toTitleCase(item.bairro)}, ${toTitleCase(item.cidade)}/${item.uf.toUpperCase()}</p><p><strong>CEP:</strong> ${item.cep}</p>`;
                    }
                    break;
                case 'cupom':
                    item = dbCupons.find(c => c.codigo === itemId);
                    if (item) {
                        title = `Detalhes do Cupom: ${item.codigo}`;
                        detailsHtml = `<p><strong>Código:</strong> ${item.codigo}</p><p><strong>Tipo:</strong> ${item.tipo}</p><p><strong>Valor:</strong> ${item.valor}</p><p><strong>Usos Totais:</strong> ${item.usos}</p>`;
                    }
                    break;
            }
        }

        if (item) {
            modalTitle.textContent = title;
            modalBody.innerHTML = detailsHtml + actionsHtml; // Juntamos os detalhes e os botões
            detailsModal.style.display = "block";
        }
    }

    function deleteItem(itemId, itemType) {
        let db, renderFn, key, storageKey;
        switch (itemType) {
            case 'produto':
                db = dbProdutos;
                renderFn = renderFunctions.produtos;
                key = 'codigo';
                storageKey = STORAGE_KEYS.products;
                break;
            case 'categoria':
                db = dbCategorias;
                renderFn = renderFunctions.categorias;
                key = 'id';
                storageKey = STORAGE_KEYS.categories;
                break;
            case 'cliente':
                db = dbClientes;
                renderFn = renderFunctions.clientes;
                key = 'codigo';
                storageKey = STORAGE_KEYS.clients;
                break;
            case 'vendedor':
                db = dbVendedores;
                renderFn = renderFunctions.vendedores;
                key = 'codigo';
                storageKey = STORAGE_KEYS.sellers;
                break;
            case 'fornecedor':
                db = dbFornecedores;
                renderFn = renderFunctions.fornecedores;
                key = 'codigo';
                storageKey = STORAGE_KEYS.suppliers;
                break;
            case 'cupom':
                db = dbCupons;
                renderFn = renderFunctions.cupons;
                key = 'codigo';
                storageKey = STORAGE_KEYS.coupons;
                break;
        }
        if (!db) return;
        const itemIndex = db.findIndex(item => String(item[key]) === String(itemId));
        if (itemIndex > -1) {
            db.splice(itemIndex, 1);
            if (storageKey) saveData(storageKey, db);
            if (renderFn) renderFn(db);
        }
    }

    function openConfirmModal(itemId, itemType) {
        confirmModalText.textContent = "Tem certeza que deseja excluir o item do cadastro?";
        confirmModal.style.display = 'block';
        btnConfirmDelete.onclick = () => {
            deleteItem(itemId, itemType);
            confirmModal.style.display = 'none';
        };
    }

    function editItem(itemId, itemType) {
        currentlyEditing = {
            id: itemId,
            type: itemType
        };
        let item, form, button;
        switch (itemType) {
            case 'produto':
                item = dbProdutos.find(p => p.codigo === itemId);
                form = document.getElementById('form-produto');
                button = document.getElementById('btn-salvar-produto');
                if (item && form) {
                    form.elements['prod-nome'].value = item.nome || '';
                    form.elements['prod-barcode'].value = item.barcode || '';
                    form.elements['prod-categoria'].value = item.categoriaId || '';
                    form.elements['prod-condicao'].value = item.condicao || 'Novo';
                    form.elements['prod-garantia'].value = item.garantia || '3 Meses';
                    form.elements['prod-serial'].value = item.serial || '';
                    form.elements['prod-preco-custo'].value = item.precoCusto || '';
                    form.elements['prod-preco'].value = item.precoVenda || '';
                    form.elements['prod-fornecedor-codigo'].value = item.fornecedorCodigo || '';
                    form.elements['prod-estoque'].value = item.estoque || 0;
                    form.elements['prod-estoque-minimo'].value = item.estoqueMinimo || 0;
                    form.elements['prod-localizacao'].value = item.localizacao || '';
                    form.elements['prod-plataforma'].value = item.plataforma || '';
                    form.elements['prod-lancamento'].value = item.lancamento || '';
                    form.elements['prod-tags'].value = item.tags || '';
                    document.getElementById('prod-fornecedor-codigo').dispatchEvent(new Event('input'));
                    button.textContent = 'Atualizar Produto';
                }
                break;
            case 'categoria':
                item = dbCategorias.find(c => c.id == itemId);
                form = document.getElementById('form-categoria');
                button = document.getElementById('btn-salvar-categoria');
                if (item && form) {
                    form.elements['cat-nome'].value = item.nome;
                    button.textContent = 'Atualizar Categoria';
                }
                break;
            case 'cliente':
                item = dbClientes.find(c => c.codigo === itemId);
                form = document.getElementById('form-cliente');
                button = document.getElementById('btn-salvar-cliente');
                if (item && form) {
                    form.elements['cli-nome'].value = item.nome || '';
                    form.elements['cli-cpf'].value = item.cpf || '';
                    form.elements['cli-email'].value = item.email || '';
                    form.elements['cli-telefone'].value = item.telefone || '';
                    form.elements['cli-cep'].value = item.cep || '';
                    form.elements['cli-rua'].value = item.rua || '';
                    form.elements['cli-numero'].value = item.numero || '';
                    form.elements['cli-bairro'].value = item.bairro || '';
                    form.elements['cli-cidade'].value = item.cidade || '';
                    form.elements['cli-uf'].value = item.uf || '';
                    button.textContent = 'Atualizar Cliente';
                }
                break;
            case 'vendedor':
                item = dbVendedores.find(v => v.codigo === itemId);
                form = document.getElementById('form-vendedor');
                button = document.getElementById('btn-salvar-vendedor');
                if (item && form) {
                    form.elements['vend-nome'].value = item.nome || '';
                    form.elements['vend-cpf'].value = item.cpf || '';
                    form.elements['vend-telefone'].value = item.telefone || '';
                    form.elements['vend-email'].value = item.email || '';
                    form.elements['vend-cep'].value = item.cep || '';
                    form.elements['vend-rua'].value = item.rua || '';
                    form.elements['vend-numero'].value = item.numero || '';
                    form.elements['vend-bairro'].value = item.bairro || '';
                    form.elements['vend-cidade'].value = item.cidade || '';
                    form.elements['vend-uf'].value = item.uf || '';
                    button.textContent = 'Atualizar Vendedor';
                }
                break;
            case 'fornecedor':
                item = dbFornecedores.find(f => f.codigo === itemId);
                form = document.getElementById('form-fornecedor');
                button = document.getElementById('btn-salvar-fornecedor');
                if (item && form) {
                    form.elements['forn-nome'].value = item.nome || '';
                    form.elements['forn-cnpj'].value = item.cnpj || '';
                    form.elements['forn-contato'].value = item.contato || '';
                    form.elements['forn-telefone'].value = item.telefone || '';
                    form.elements['forn-cep'].value = item.cep || '';
                    form.elements['forn-rua'].value = item.rua || '';
                    form.elements['forn-numero'].value = item.numero || '';
                    form.elements['forn-bairro'].value = item.bairro || '';
                    form.elements['forn-cidade'].value = item.cidade || '';
                    form.elements['forn-uf'].value = item.uf || '';
                    button.textContent = 'Atualizar Fornecedor';
                }
                break;
            case 'cupom':
                item = dbCupons.find(c => c.codigo === itemId);
                form = document.getElementById('form-cupom');
                button = document.getElementById('btn-salvar-cupom');
                if (item && form) {
                    form.elements['cupom-codigo'].value = item.codigo || '';
                    form.elements['cupom-tipo'].value = item.tipo || 'fixed';
                    form.elements['cupom-valor'].value = item.valor || '';
                    form.elements['cupom-usos'].value = item.usos || 1;
                    button.textContent = 'Atualizar Cupom';
                }
                break;
        }
        mainContent.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    }

    function resetEditState(form) {
        let buttonText = 'Salvar';
        switch (form.id) {
            case 'form-produto':
                buttonText = 'Salvar Produto';
                break;
            case 'form-categoria':
                buttonText = 'Salvar Categoria';
                break;
            case 'form-cliente':
                buttonText = 'Salvar Cliente';
                break;
            case 'form-vendedor':
                buttonText = 'Salvar Vendedor';
                break;
            case 'form-fornecedor':
                buttonText = 'Salvar Fornecedor';
                break;
            case 'form-cupom':
                buttonText = 'Salvar Cupom';
                break;
        }
        currentlyEditing = {
            id: null,
            type: null
        };
        if (form) {
            form.querySelector('.btn-primary').textContent = buttonText;
            form.reset();
        }
    }

    function setupEnterKeyNavigation(formElement) {
        const focusableElements = Array.from(
            formElement.querySelectorAll('input, select, textarea, button:not([type="button"])')
        );

        formElement.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                const currentElement = e.target;
                const currentIndex = focusableElements.indexOf(currentElement);

                // Se o Enter for pressionado em um campo que não seja o último
                if (currentIndex > -1 && currentIndex < focusableElements.length - 1) {
                    e.preventDefault(); // Impede o comportamento padrão (como submeter o form)
                    const nextElement = focusableElements[currentIndex + 1];
                    nextElement.focus(); // Move o foco para o próximo elemento
                }
            }
        });
    }

    function renderCaixaView() {
        const fechadoView = document.getElementById('caixa-fechado-view');
        const abertoView = document.getElementById('caixa-aberto-view');

        if (caixaAtual) {
            fechadoView.style.display = 'none';
            abertoView.style.display = 'block';
            document.getElementById('info-data-abertura').textContent = new Date(caixaAtual.dataAbertura).toLocaleString('pt-BR');
            document.getElementById('info-valor-abertura').textContent = formatCurrency(caixaAtual.valorAbertura);
            document.getElementById('valor-final').value = '';
            calcularEExibirFechamento(); // Calcula os valores assim que a tela abre
        } else {
            fechadoView.style.display = 'block';
            abertoView.style.display = 'none';
            document.getElementById('valor-inicial').value = '';
        }
        renderMovimentacoesView(); // ATUALIZA A TELA DE SANGRIAS/SUPRIMENTOS
    }

    function calcularEExibirFechamento() {
        if (!caixaAtual) return; // Só executa se um caixa estiver aberto

        // 1. Pega o valor inicial do caixa
        let valorCalculado = caixaAtual.valorAbertura;

        // 2. Soma as VENDAS EM DINHEIRO feitas durante esta sessão
        const vendasDaSessao = dbVendas.filter(venda => 
            new Date(venda.date) > new Date(caixaAtual.dataAbertura) &&
            venda.paymentMethod === 'Dinheiro'
        );
        const totalVendasDinheiro = vendasDaSessao.reduce((acc, venda) => acc + venda.total, 0);
        valorCalculado += totalVendasDinheiro;

        // 3. Soma os SUPRIMENTOS e subtrai as SANGRIAS desta sessão
        const movimentacoesDaSessao = dbMovimentacoes.filter(mov => mov.caixaId === caixaAtual.id);
        movimentacoesDaSessao.forEach(mov => {
            if (mov.tipo === 'SUPRIMENTO') {
                valorCalculado += mov.valor;
            } else if (mov.tipo === 'SANGRIA') {
                valorCalculado -= mov.valor;
            }
        });

        // Exibe o valor calculado na tela
        valorCalculadoEl.textContent = formatCurrency(valorCalculado);

        // 4. Calcula e exibe a DIFERENÇA (Sobra/Falta)
        const valorFinalDigitado = parseFloat(valorFinalInput.value) || 0;
        const diferenca = valorFinalDigitado - valorCalculado;

        diferencaCaixaEl.textContent = formatCurrency(diferenca);
        diferencaCaixaEl.classList.remove('sobra', 'falta'); // Limpa as cores
        if (diferenca > 0) {
            diferencaCaixaEl.classList.add('sobra');
        } else if (diferenca < 0) {
            diferencaCaixaEl.classList.add('falta');
        }

        return { valorCalculado, diferenca }; // Retorna os valores para uso posterior
    }

    if (valorFinalInput) {
        valorFinalInput.addEventListener('input', calcularEExibirFechamento);
    }
        document.addEventListener('click', (e) => {
        const target = e.target; // O 'target' agora é pego aqui dentro

        // Lógica para os botões de ação nas tabelas de cadastro
        if (target.classList.contains('btn-view') || target.classList.contains('btn-edit') || target.classList.contains('btn-delete')) {
            // Previne que a mesma lógica se aplique aos botões de reimpressão
            if (!target.classList.contains('btn-sale-details')) {
                const itemId = target.dataset.id;
                const itemType = target.dataset.type;

                if (target.classList.contains('btn-view')) {
                    showDetails(itemId, itemType);
                }
                
                if (target.classList.contains('btn-edit')) { // Botão Editar / Converter
                    if (itemType === 'orcamento') {
                        const orcamento = dbOrcamentos.find(o => o.id === itemId);
                        if (orcamento) {
                            // REGRA DE SEGURANÇA: Bloqueia a conversão se não estiver Pendente/Expirado
                            if (orcamento.status === 'Aprovado' || orcamento.status === 'Cancelado') {
                                alert(`Este orçamento já foi ${orcamento.status.toLowerCase()} e não pode ser convertido.`);
                                return;
                            }
                            orcamento.status = 'Aprovado';
                            saveData(STORAGE_KEYS.orcamentos, dbOrcamentos);
                            localStorage.setItem('quoteToConvert', itemId);
                            window.location.href = '../index.html';
                        }
                    } else {
                        editItem(itemId, itemType);
                    }
                }

                if (target.classList.contains('btn-delete')) { // Botão Excluir / Cancelar
                    if (itemType === 'orcamento') {
                        const orcamento = dbOrcamentos.find(o => o.id === itemId);
                        if (orcamento && (orcamento.status === 'Pendente' || new Date(orcamento.validade) < new Date())) {
                            if (confirm(`Tem certeza que deseja cancelar o orçamento ${itemId}?`)) {
                                orcamento.status = 'Cancelado';
                                saveData(STORAGE_KEYS.orcamentos, dbOrcamentos);
                                renderFunctions.orcamentos();
                            }
                        } else {
                            alert(`Não é possível cancelar um orçamento com status '${toTitleCase(orcamento.status)}'.`);
                        }
                    } else {
                        openConfirmModal(itemId, itemType);
                    }
                }
            }
        }

        // Se o botão de detalhes de VENDA na tabela for clicado
        if (target.classList.contains('btn-sale-details')) {
            const vendaId = target.dataset.id;
            showDetails(vendaId, 'venda');
        }

        // Se um dos botões de impressão DENTRO DO MODAL for clicado
        if (target.classList.contains('btn-modal-print')) {
            const printType = target.dataset.type;
            // Apenas checamos se a "memória" (lastSaleData) não está vazia
            if (lastSaleData) {
                showPreview(printType);
            }
        }
    });

// ==========================================================
// --- SEÇÃO DE CADASTROS (Handlers e Renderização) ---
    const renderFunctions = {};
    // ==========================================================
    // ORÇAMENTOS (LISTAGEM)
    const tabelaOrcamentos = document.getElementById('tabela-orcamentos');
    renderFunctions.orcamentos = (data = dbOrcamentos) => {
        if (!tabelaOrcamentos) return;
        tabelaOrcamentos.innerHTML = "";
        data.sort((a, b) => new Date(b.dataCriacao) - new Date(a.dataCriacao)); 

        data.forEach(orc => {
            const dataValidade = new Date(orc.validade);
            const hoje = new Date();
            let statusClass = '';
            let statusText = toTitleCase(orc.status);

            if (orc.status === 'Pendente' && dataValidade < hoje) {
                statusText = 'Expirado';
                statusClass = 'status-expirado';
            } else if (orc.status === 'Pendente') {
                statusClass = 'status-pendente';
            } else if (orc.status === 'Aprovado') {
                statusClass = 'status-convertido';
            } else if (orc.status === 'Cancelado') {
                statusClass = 'status-cancelado';
            }

            const row = document.createElement('tr');
            row.innerHTML = `
                <td class="code-column">${orc.id}</td>
                <td>${new Date(orc.dataCriacao).toLocaleDateString('pt-BR')}</td>
                <td>${orc.cliente.nome}</td>
                <td>${new Date(orc.validade).toLocaleDateString('pt-BR')}</td>
                <td>${formatCurrency(orc.total)}</td>
                <td><span class="status-tag ${statusClass}">${statusText}</span></td>
                <td class="actions">
                    <button class="btn-view" data-id="${orc.id}" data-type="orcamento">Ver</button>
                    <button class="btn-edit" data-id="${orc.id}" data-type="orcamento">Converter</button>
                    <button class="btn-delete" data-id="${orc.id}" data-type="orcamento">Cancelar</button>
                </td>
            `;
            tabelaOrcamentos.appendChild(row);
        });
    }

    // CATEGORIAS
    const formCategoria = document.getElementById('form-categoria');
    const tabelaCategorias = document.getElementById('tabela-categorias');
    const selectCategoriaProduto = document.getElementById('prod-categoria');
    if (formCategoria) {
        formCategoria.addEventListener('submit', (e) => {
            e.preventDefault();
            const nome = document.getElementById('cat-nome').value.toUpperCase();
            const descricao = document.getElementById('cat-descricao').value;
            if (!nome) return;
            if (currentlyEditing.type === 'categoria') {
                const item = dbCategorias.find(c => c.id == currentlyEditing.id);
                if (item) {
                    item.nome = nome;
                    item.descricao = descricao;
                }
            } else {
                const id = categoryCounter++;
                dbCategorias.push({
                    id,
                    nome,
                    descricao
                });
            }
            saveData(STORAGE_KEYS.categories, dbCategorias);
            renderFunctions.categorias();
            populateCategoryDropdown();
            resetEditState(formCategoria);
        });
    }
    renderFunctions.categorias = (data = dbCategorias) => {
        if (!tabelaCategorias) return;
        tabelaCategorias.innerHTML = "";
        data.forEach(cat => {
            tabelaCategorias.innerHTML += `<tr><td>${toTitleCase(cat.nome)}</td><td>${cat.descricao || 'N/A'}</td><td class="actions"><button class="btn-view" data-id="${cat.id}" data-type="categoria">Ver</button><button class="btn-edit" data-id="${cat.id}" data-type="categoria">Editar</button><button class="btn-delete" data-id="${cat.id}" data-type="categoria">Excluir</button></td></tr>`;
        });
    }

    function populateCategoryDropdown() {
        if (!selectCategoriaProduto) return;
        selectCategoriaProduto.innerHTML = '<option value="">Selecione...</option>';
        dbCategorias.forEach(cat => {
            selectCategoriaProduto.innerHTML += `<option value="${cat.id}">${toTitleCase(cat.nome)}</option>`;
        });
    }

// ==========================================================
// PRODUTOS
    const formProduto = document.getElementById('form-produto');
    const tabelaProdutos = document.getElementById('tabela-produtos');
    const prodFornecedorCodigoInput = document.getElementById('prod-fornecedor-codigo');
    const prodFornecedorNomeSpan = document.getElementById('prod-fornecedor-nome');
    if (prodFornecedorCodigoInput) {
        prodFornecedorCodigoInput.addEventListener('input', () => {
            const codigo = prodFornecedorCodigoInput.value.toUpperCase();
            if (!codigo) {
                prodFornecedorNomeSpan.textContent = '';
                return;
            }
            const fornecedor = dbFornecedores.find(f => f.codigo === codigo);
            if (fornecedor) {
                prodFornecedorNomeSpan.textContent = toTitleCase(fornecedor.nome);
                prodFornecedorNomeSpan.classList.remove('error');
            } else {
                prodFornecedorNomeSpan.textContent = 'Código não encontrado';
                prodFornecedorNomeSpan.classList.add('error');
            }
        });
    }
    if (formProduto) {
        formProduto.addEventListener('submit', (e) => {
            e.preventDefault();
            const prodData = {
                nome: document.getElementById('prod-nome').value.toUpperCase(),
                barcode: document.getElementById('prod-barcode').value,
                categoriaId: document.getElementById('prod-categoria').value,
                condicao: document.getElementById('prod-condicao').value,
                garantia: document.getElementById('prod-garantia').value,
                serial: document.getElementById('prod-serial').value.toUpperCase(),
                precoCusto: document.getElementById('prod-preco-custo').value,
                precoVenda: document.getElementById('prod-preco').value,
                fornecedorCodigo: prodFornecedorCodigoInput.value.toUpperCase(),
                estoque: document.getElementById('prod-estoque').value,
                estoqueMinimo: document.getElementById('prod-estoque-minimo').value,
                localizacao: document.getElementById('prod-localizacao').value.toUpperCase(),
                plataforma: document.getElementById('prod-plataforma').value.toUpperCase(),
                lancamento: document.getElementById('prod-lancamento').value,
                tags: document.getElementById('prod-tags').value.toUpperCase()
            };
            if (currentlyEditing.type === 'produto') {
                const item = dbProdutos.find(p => p.codigo === currentlyEditing.id);
                if (item) Object.assign(item, prodData);
            } else {
                const cod = 'P' + String(productCounter++).padStart(3, '0');
                dbProdutos.push({
                    codigo: cod,
                    ...prodData
                });
            }
            saveData(STORAGE_KEYS.products, dbProdutos);
            renderFunctions.produtos();
            resetEditState(formProduto);
            if (prodFornecedorNomeSpan) prodFornecedorNomeSpan.textContent = '';
        });
    }
    renderFunctions.produtos = (data = dbProdutos) => {
        if (!tabelaProdutos) return;
        tabelaProdutos.innerHTML = "";
        data.forEach(prod => {
            const fornecedor = dbFornecedores.find(f => f.codigo === prod.fornecedorCodigo);
            const nomeFornecedor = fornecedor ? toTitleCase(fornecedor.nome) : 'N/D';
            tabelaProdutos.innerHTML += `<tr><td class="code-column">${prod.codigo}</td><td>${toTitleCase(prod.nome)}</td><td>${nomeFornecedor}</td><td>${formatCurrency(parseFloat(prod.precoVenda))}</td><td>${prod.estoque}</td><td class="actions"><button class="btn-view" data-id="${prod.codigo}" data-type="produto">Ver</button><button class="btn-edit" data-id="${prod.codigo}" data-type="produto">Editar</button><button class="btn-delete" data-id="${prod.codigo}" data-type="produto">Excluir</button></td></tr>`;
        });
    }
// ==========================================================
// CLIENTES
    const formCliente = document.getElementById('form-cliente');
    const tabelaClientes = document.getElementById('tabela-clientes');
    if (formCliente) {
        formCliente.addEventListener('submit', (e) => {
            e.preventDefault();
            const cliData = {
                nome: document.getElementById('cli-nome').value.toUpperCase(),
                cpf: document.getElementById('cli-cpf').value,
                telefone: document.getElementById('cli-telefone').value,
                email: document.getElementById('cli-email').value,
                cep: document.getElementById('cli-cep').value,
                rua: document.getElementById('cli-rua').value.toUpperCase(),
                numero: document.getElementById('cli-numero').value,
                bairro: document.getElementById('cli-bairro').value.toUpperCase(),
                cidade: document.getElementById('cli-cidade').value.toUpperCase(),
                uf: document.getElementById('cli-uf').value.toUpperCase()
            };
            if (currentlyEditing.type === 'cliente') {
                const item = dbClientes.find(c => c.codigo === currentlyEditing.id);
                if (item) Object.assign(item, cliData);
            } else {
                const cod = 'C' + String(clientCounter++).padStart(3, '0');
                dbClientes.push({
                    codigo: cod,
                    ...cliData
                });
            }
            saveData(STORAGE_KEYS.clients, dbClientes);
            renderFunctions.clientes();
            resetEditState(formCliente);
        });
    }
    renderFunctions.clientes = (data = dbClientes) => {
        if (!tabelaClientes) return;
        tabelaClientes.innerHTML = "";
        data.forEach(cliente => {
            tabelaClientes.innerHTML += `<tr><td class="code-column">${cliente.codigo}</td><td>${toTitleCase(cliente.nome)}</td><td>${cliente.cpf}</td><td>${cliente.telefone}</td><td class="actions"><button class="btn-view" data-id="${cliente.codigo}" data-type="cliente">Ver</button><button class="btn-edit" data-id="${cliente.codigo}" data-type="cliente">Editar</button><button class="btn-delete" data-id="${cliente.codigo}" data-type="cliente">Excluir</button></td></tr>`;
        });
    }
// ==========================================================
// VENDEDORES
    const formVendedor = document.getElementById('form-vendedor');
    const tabelaVendedores = document.getElementById('tabela-vendedores');
    if (formVendedor) {
        formVendedor.addEventListener('submit', (e) => {
            e.preventDefault();
            const vendData = {
                nome: document.getElementById('vend-nome').value.toUpperCase(),
                cpf: document.getElementById('vend-cpf').value,
                telefone: document.getElementById('vend-telefone').value,
                email: document.getElementById('vend-email').value,
                cep: document.getElementById('vend-cep').value,
                rua: document.getElementById('vend-rua').value.toUpperCase(),
                numero: document.getElementById('vend-numero').value,
                bairro: document.getElementById('vend-bairro').value.toUpperCase(),
                cidade: document.getElementById('vend-cidade').value.toUpperCase(),
                uf: document.getElementById('vend-uf').value.toUpperCase()
            };
            if (currentlyEditing.type === 'vendedor') {
                const item = dbVendedores.find(v => v.codigo === currentlyEditing.id);
                if (item) Object.assign(item, vendData);
            } else {
                const cod = 'V' + String(sellerCounter++).padStart(3, '0');
                dbVendedores.push({
                    codigo: cod,
                    ...vendData
                });
            }
            saveData(STORAGE_KEYS.sellers, dbVendedores);
            renderFunctions.vendedores();
            resetEditState(formVendedor);
        });
    }
    renderFunctions.vendedores = (data = dbVendedores) => {
        if (!tabelaVendedores) return;
        tabelaVendedores.innerHTML = "";
        data.forEach(vend => {
            tabelaVendedores.innerHTML += `<tr><td class="code-column">${vend.codigo}</td><td>${toTitleCase(vend.nome)}</td><td>${vend.cpf}</td><td>${vend.telefone}</td><td class="actions"><button class="btn-view" data-id="${vend.codigo}" data-type="vendedor">Ver</button><button class="btn-edit" data-id="${vend.codigo}" data-type="vendedor">Editar</button><button class="btn-delete" data-id="${vend.codigo}" data-type="vendedor">Excluir</button></td></tr>`;
        });
    }
// ==========================================================
// FORNECEDORES
    const formFornecedor = document.getElementById('form-fornecedor');
    const tabelaFornecedores = document.getElementById('tabela-fornecedores');
    if (formFornecedor) {
        formFornecedor.addEventListener('submit', (e) => {
            e.preventDefault();
            const fornData = {
                nome: document.getElementById('forn-nome').value.toUpperCase(),
                cnpj: document.getElementById('forn-cnpj').value,
                contato: document.getElementById('forn-contato').value.toUpperCase(),
                telefone: document.getElementById('forn-telefone').value,
                cep: document.getElementById('forn-cep').value,
                rua: document.getElementById('forn-rua').value.toUpperCase(),
                numero: document.getElementById('forn-numero').value,
                bairro: document.getElementById('forn-bairro').value.toUpperCase(),
                cidade: document.getElementById('forn-cidade').value.toUpperCase(),
                uf: document.getElementById('forn-uf').value.toUpperCase()
            };
            if (currentlyEditing.type === 'fornecedor') {
                const item = dbFornecedores.find(f => f.codigo === currentlyEditing.id);
                if (item) Object.assign(item, fornData);
            } else {
                const cod = 'F' + String(supplierCounter++).padStart(3, '0');
                dbFornecedores.push({
                    codigo: cod,
                    ...fornData
                });
            }
            saveData(STORAGE_KEYS.suppliers, dbFornecedores);
            renderFunctions.fornecedores();
            resetEditState(formFornecedor);
        });
    }
    renderFunctions.fornecedores = (data = dbFornecedores) => {
        if (!tabelaFornecedores) return;
        tabelaFornecedores.innerHTML = "";
        data.forEach(forn => {
            tabelaFornecedores.innerHTML += `<tr><td class="code-column">${forn.codigo}</td><td>${toTitleCase(forn.nome)}</td><td>${forn.cnpj}</td><td>${forn.telefone}</td><td class="actions"><button class="btn-view" data-id="${forn.codigo}" data-type="fornecedor">Ver</button><button class="btn-edit" data-id="${forn.codigo}" data-type="fornecedor">Editar</button><button class="btn-delete" data-id="${forn.codigo}" data-type="fornecedor">Excluir</button></td></tr>`;
        });
    }
// ==========================================================
// CUPONS
    const formCupom = document.getElementById('form-cupom');
    const tabelaCupons = document.getElementById('tabela-cupons');
    if (formCupom) {
        formCupom.addEventListener('submit', (e) => {
            e.preventDefault();
            const cupomData = {
                codigo: document.getElementById('cupom-codigo').value.toUpperCase(),
                tipo: document.getElementById('cupom-tipo').value,
                valor: document.getElementById('cupom-valor').value,
                usos: document.getElementById('cupom-usos').value
            };
            if (currentlyEditing.type === 'cupom') {
                const item = dbCupons.find(c => c.codigo === currentlyEditing.id);
                if (item) Object.assign(item, cupomData);
            } else {
                dbCupons.push(cupomData);
            }
            saveData(STORAGE_KEYS.coupons, dbCupons);
            renderFunctions.cupons();
            resetEditState(formCupom);
        });
    }
    renderFunctions.cupons = (data = dbCupons) => {
        if (!tabelaCupons) return;
        tabelaCupons.innerHTML = "";
        data.forEach(cupom => {
            tabelaCupons.innerHTML += `<tr><td class="code-column">${cupom.codigo}</td><td>${cupom.tipo}</td><td>${cupom.valor}</td><td>${cupom.usos}</td><td class="actions"><button class="btn-view" data-id="${cupom.codigo}" data-type="cupom">Ver</button><button class="btn-edit" data-id="${cupom.codigo}" data-type="cupom">Editar</button><button class="btn-delete" data-id="${cupom.codigo}" data-type="cupom">Excluir</button></td></tr>`;
        });
    }
// ==========================================================
// --- FUNÇÕES DE BUSCA E RELATÓRIOS ---
    function setupSearch(inputId, renderKey, database, searchKeys) {
        const searchInput = document.getElementById(inputId);
        if (!searchInput) return;
        searchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            if (searchTerm === '') {
                renderFunctions[renderKey](database);
                return;
            }
            const filteredData = database.filter(item =>
                searchKeys.some(key =>
                    item[key] && item[key].toString().toLowerCase().includes(searchTerm)
                )
            );
            renderFunctions[renderKey](filteredData);
        });
    }

    function renderReports() {
        const hoje = new Date();
        hoje.setHours(0, 0, 0, 0);

        const vendasDoDia = dbVendas.filter(venda => {
            const dataVenda = new Date(venda.date);
            dataVenda.setHours(0, 0, 0, 0);
            return dataVenda.getTime() === hoje.getTime();
        });

        document.getElementById('report-faturamento-dia').textContent = formatCurrency(vendasDoDia.reduce((acc, venda) => acc + venda.total, 0));
        document.getElementById('report-vendas-dia').textContent = vendasDoDia.length;
        document.getElementById('report-ticket-medio').textContent = formatCurrency(vendasDoDia.length > 0 ? vendasDoDia.reduce((acc, venda) => acc + venda.total, 0) / vendasDoDia.length : 0);
        document.getElementById('report-itens-vendidos').textContent = vendasDoDia.reduce((acc, venda) => acc + venda.itens.reduce((accItem, item) => accItem + item.quantidade, 0), 0);

        const produtosContagem = {};
        vendasDoDia.forEach(venda => {
            venda.itens.forEach(item => {
                produtosContagem[item.codigo] = (produtosContagem[item.codigo] || 0) + item.quantidade;
            });
        });
        const produtosMaisVendidos = Object.entries(produtosContagem).sort(([, a], [, b]) => b - a).slice(0, 5);
        const listaProdutosVendidos = document.getElementById('lista-produtos-vendidos');
        listaProdutosVendidos.innerHTML = '';
        produtosMaisVendidos.forEach(([codigo, qtd]) => {
            const produto = dbProdutos.find(p => p.codigo === codigo);
            if (produto) {
                listaProdutosVendidos.innerHTML += `<li><span>${toTitleCase(produto.nome)}</span><span>${qtd} un.</span></li>`;
            }
        });

        const vendasPorVendedor = {};
        vendasDoDia.forEach(venda => {
            if (venda.vendedor && venda.vendedor.codigo) {
                vendasPorVendedor[venda.vendedor.codigo] = (vendasPorVendedor[venda.vendedor.codigo] || 0) + venda.total;
            }
        });
        const listaVendasVendedor = document.getElementById('lista-vendas-vendedor');
        listaVendasVendedor.innerHTML = '';
        for (const [codigo, total] of Object.entries(vendasPorVendedor)) {
            const vendedor = dbVendedores.find(v => v.codigo === codigo);
            if (vendedor) {
                listaVendasVendedor.innerHTML += `<li><span>${toTitleCase(vendedor.nome)}</span><span>${formatCurrency(total)}</span></li>`;
            }
        }

        const estoqueBaixo = dbProdutos.filter(p => p.estoque <= p.estoqueMinimo);
        const listaEstoqueBaixo = document.getElementById('lista-estoque-baixo');
        listaEstoqueBaixo.innerHTML = '';
        if (estoqueBaixo.length > 0) {
            estoqueBaixo.forEach(p => {
                listaEstoqueBaixo.innerHTML += `<li><span>${toTitleCase(p.nome)}</span><span>${p.estoque} / ${p.estoqueMinimo}</span></li>`;
            });
        } else {
            listaEstoqueBaixo.innerHTML = `<li><span>Nenhum item com estoque baixo!</span><span>🎉</span></li>`;
        }

        const ultimasVendas = vendasDoDia.slice(-3).reverse();
        const listaUltimasVendas = document.getElementById('lista-ultimas-vendas');
        listaUltimasVendas.innerHTML = '';
        ultimasVendas.forEach(venda => {
            listaUltimasVendas.innerHTML += `<li><span>${toTitleCase(venda.cliente.nome)}</span><span>${formatCurrency(venda.total)}</span></li>`;
        });
    }

    const tabelaHistorico = document.getElementById('tabela-historico');
    renderFunctions.historico = (data = dbVendas) => {
        if (!tabelaHistorico) return;
        tabelaHistorico.innerHTML = "";
        data.forEach(venda => {
            const totalItens = venda.itens.reduce((acc, item) => acc + item.quantidade, 0);
            tabelaHistorico.innerHTML += `<tr><td class="code-column">${venda.recibo}</td><td>${new Date(venda.date).toLocaleString('pt-BR')}</td><td>${toTitleCase(venda.cliente.nome)}</td><td>${toTitleCase(venda.vendedor.nome)}</td><td>${totalItens}</td><td>${formatCurrency(venda.total)}</td><td class="actions"><button class="btn-view btn-sale-details" data-id="${venda.recibo}" data-type="venda">Detalhes</button></td></tr>`;
        });
    }
// ==========================================================
// --- FUNÇÕES DE IMPRESSÃO ---
    const btnPrintNf = document.getElementById('btn-print-nf');
    const btnPrintGarantia = document.getElementById('btn-print-garantia');
    const docContentEl = document.getElementById('document-content');
    const btnClosePreview = document.getElementById('btn-close-preview');
    const btnPrintDocument = document.getElementById('btn-print-document');

    if (btnPrintNf) btnPrintNf.addEventListener('click', () => showPreview('nf'));
    if (btnPrintGarantia) btnPrintGarantia.addEventListener('click', () => showPreview('garantia'));
    if (btnClosePreview) btnClosePreview.addEventListener('click', () => {
        docPreviewModal.style.display = 'none';
        if (postSaleModal) postSaleModal.style.display = 'block';
    });
    if (btnPrintDocument) btnPrintDocument.addEventListener('click', () => window.print());
    window.addEventListener('afterprint', () => {
        if (docPreviewModal) {
            docPreviewModal.style.display = 'none';
        }
    });

    function showPreview(type) {
        docContentEl.innerHTML = generateDocumentHTML(type, lastSaleData, dbProdutos);
        if (postSaleModal) postSaleModal.style.display = 'none';
        if (docPreviewModal) docPreviewModal.style.display = 'block';
    }
// ==========================================================
// --- LÓGICA DE ABERTURA E FECHAMENTO DE CAIXA ---
    if (btnAbrirCaixa) {
        btnAbrirCaixa.addEventListener('click', () => {
            const valorInicialInput = document.getElementById('valor-inicial');
            const valorAbertura = parseFloat(valorInicialInput.value);

            if (isNaN(valorAbertura) || valorAbertura < 0) {
                alert('Por favor, insira um valor de abertura válido.');
                return;
            }

            // Cria o novo registro de caixa
            caixaAtual = {
                id: Date.now(),
                dataAbertura: new Date().toISOString(),
                valorAbertura: valorAbertura,
                status: 'ABERTO',
                // Campos para o fechamento
                dataFechamento: null,
                valorFechamento: null,
            };

            dbCaixas.push(caixaAtual);
            saveData(STORAGE_KEYS.caixas, dbCaixas);
            renderCaixaView(); // Atualiza a tela
        });
    }

    if (btnFecharCaixa) {
        btnFecharCaixa.addEventListener('click', () => {
            const valorFinalInput = document.getElementById('valor-final');
            const valorFechamento = parseFloat(valorFinalInput.value);

            if (isNaN(valorFechamento) || valorFechamento < 0) {
                alert('Por favor, insira um valor de fechamento válido.');
                return;
            }

            // Pega os valores finais calculados
            const { valorCalculado, diferenca } = calcularEExibirFechamento();

            const caixaParaFechar = dbCaixas.find(c => c.id === caixaAtual.id);
            if (caixaParaFechar) {
                caixaParaFechar.dataFechamento = new Date().toISOString();
                caixaParaFechar.valorFechamento = valorFechamento;
                caixaParaFechar.valorCalculadoSistema = valorCalculado; // SALVA O VALOR CALCULADO
                caixaParaFechar.diferenca = diferenca; // SALVA A DIFERENÇA
                caixaParaFechar.status = 'FECHADO';

                saveData(STORAGE_KEYS.caixas, dbCaixas);
                caixaAtual = null;
                renderCaixaView();
            }
        });
    }

// --- LÓGICA DE SANGRIAS E SUPRIMENTOS ---
    const btnRegistrarSangria = document.getElementById('btn-registrar-sangria');
    const btnRegistrarSuprimento = document.getElementById('btn-registrar-suprimento');

    function renderMovimentacoesView() {
        const bloqueadoView = document.getElementById('movimentacoes-bloqueado-view');
        const movimentacoesView = document.getElementById('movimentacoes-view');

        if (caixaAtual) { // Se o caixa está aberto, mostra os formulários
            bloqueadoView.style.display = 'none';
            movimentacoesView.style.display = 'block';
        } else { // Se o caixa está fechado, mostra a mensagem de bloqueio
            bloqueadoView.style.display = 'block';
            movimentacoesView.style.display = 'none';
        }
    }

    if (btnRegistrarSangria) {
        btnRegistrarSangria.addEventListener('click', () => {
            const valor = parseFloat(document.getElementById('sangria-valor').value);
            const motivo = document.getElementById('sangria-motivo').value;

            if (isNaN(valor) || valor <= 0) {
                alert('Por favor, insira um valor válido para a sangria.');
                return;
            }

            // Cria o registro da movimentação
            dbMovimentacoes.push({
                id: Date.now(),
                caixaId: caixaAtual.id,
                tipo: 'SANGRIA',
                valor: valor,
                motivo: motivo,
                data: new Date().toISOString()
            });

            saveData(STORAGE_KEYS.caixaMovimentacoes, dbMovimentacoes);
            alert(`Sangria de ${formatCurrency(valor)} registrada com sucesso!`);
            document.getElementById('sangria-valor').value = '';
            document.getElementById('sangria-motivo').value = '';
        });
    }

    if (btnRegistrarSuprimento) {
        btnRegistrarSuprimento.addEventListener('click', () => {
            const valor = parseFloat(document.getElementById('suprimento-valor').value);
            const motivo = document.getElementById('suprimento-motivo').value;

            if (isNaN(valor) || valor <= 0) {
                alert('Por favor, insira um valor válido para o suprimento.');
                return;
            }

            dbMovimentacoes.push({
                id: Date.now(),
                caixaId: caixaAtual.id,
                tipo: 'SUPRIMENTO',
                valor: valor,
                motivo: motivo,
                data: new Date().toISOString()
            });

            saveData(STORAGE_KEYS.caixaMovimentacoes, dbMovimentacoes);
            alert(`Suprimento de ${formatCurrency(valor)} registrado com sucesso!`);
            document.getElementById('suprimento-valor').value = '';
            document.getElementById('suprimento-motivo').value = '';
        });
    }



// ==========================================================
// --- INICIALIZAÇÃO GERAL ---

    // Tenta encontrar um caixa que foi deixado aberto
    caixaAtual = dbCaixas.find(c => c.status === 'ABERTO') || null;
    renderCaixaView(); // Renderiza a visão correta do caixa (aberto ou fechado)

    const activeSidebarLink = document.querySelector('.sidebar .nav-link.active');
    if (activeSidebarLink) {
        activeSidebarLink.click();
    }

    renderFunctions.produtos();
    renderFunctions.categorias();
    renderFunctions.clientes();
    renderFunctions.vendedores();
    renderFunctions.fornecedores();
    renderFunctions.cupons();
    renderFunctions.orcamentos();
    populateCategoryDropdown();

    initializeOrcamentos();

// ==========================================================
// --- NAVEGAÇÃO POR "ENTER" NOS FORMULÁRIOS ---
    document.querySelectorAll('.form-container').forEach(form => {
        setupEnterKeyNavigation(form);
    });

// ==========================================================
// LÓGICA PARA OS NOVOS BOTÕES DE FLUIDEZ
    
    const clearFormButtons = document.querySelectorAll('.btn-limpar');
    clearFormButtons.forEach(button => {
        button.addEventListener('click', () => {
            // Pega o ID do formulário alvo que definimos no HTML (ex: '#form-produto')
            const formSelector = button.dataset.formTarget;
            if (formSelector) {
                // Encontra o formulário na página usando o seletor
                const formToClear = document.querySelector(formSelector);
                if (formToClear) {
                    formToClear.reset(); // Limpa o formulário encontrado!

                    // Lógica extra para o campo de fornecedor
                    const fornecedorInput = formToClear.querySelector('#prod-fornecedor-codigo');
                    if (fornecedorInput) {
                        fornecedorInput.dispatchEvent(new Event('input'));
                    }
                }
            }
        });
    });

    const btnScrollUp = document.getElementById('btn-scroll-up');
    const btnScrollDown = document.getElementById('btn-scroll-down');

    if (btnScrollUp && btnScrollDown && mainContent) {
        btnScrollUp.addEventListener('click', () => {
            mainContent.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });

        btnScrollDown.addEventListener('click', () => {
            const activePanel = document.querySelector('#cadastros .sub-panel.active');
            if (activePanel) {
                const tableHeader = activePanel.querySelector('.table-header');
                if (tableHeader) {
                    tableHeader.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            }
        });


        // Substitua o bloco 'mainContent.addEventListener' antigo por este:
        mainContent.addEventListener('scroll', () => {
            const hasScroll = mainContent.scrollHeight > mainContent.clientHeight;
            const isCadastrosActive = document.getElementById('cadastros').classList.contains('active');

            if (hasScroll && isCadastrosActive) {
                // --- LÓGICA DO BOTÃO DE SUBIR (▲) ---
                // Se rolou mais de 200px para baixo, mostra o botão de subir.
                if (mainContent.scrollTop > 200) {
                    btnScrollUp.classList.add('visible');
                } else {
                    btnScrollUp.classList.remove('visible');
                }

                // --- NOVA LÓGICA DO BOTÃO DE DESCER (▼) ---
                // Checa se a rolagem chegou ao fim da página (com uma margem de 5px).
                const isAtBottom = mainContent.scrollTop + mainContent.clientHeight >= mainContent.scrollHeight - 5;
                
                if (isAtBottom) {
                    // Se está no fim, esconde o botão de descer.
                    btnScrollDown.classList.remove('visible');
                } else {
                    // Se não está no fim, mostra o botão de descer.
                    btnScrollDown.classList.add('visible');
                }

            } else {
                // Se não há scroll ou não está na aba de cadastros, esconde ambos.
                btnScrollUp.classList.remove('visible');
                btnScrollDown.classList.remove('visible');
            }
        });
    }
// ==========================================================
// --- LÓGICA DO DASHBOARD DE VENDAS ---
// ==========================================================
    function initializeDashboard() {
        // 1. PEGAR ELEMENTOS DO DOM
        const startDateInput = document.getElementById('db-date-start');
        const endDateInput = document.getElementById('db-date-end');
        const quickFilterButtons = document.querySelectorAll('#dashboard-filters .btn-secondary');

        const kpiFaturamentoEl = document.getElementById('db-faturamento');
        const kpiLucroEl = document.getElementById('db-lucro');
        const kpiVendasEl = document.getElementById('db-n-vendas');
        const kpiTicketMedioEl = document.getElementById('db-ticket-medio');

        const chartContexts = {
            faturamento: document.getElementById('faturamentoChart').getContext('2d'),
            categorias: document.getElementById('categoriasChart').getContext('2d'),
            produtos: document.getElementById('produtosChart').getContext('2d'),
            diasDaSemana: document.getElementById('diasDaSemanaChart').getContext('2d'),
        };

        let dashboardCharts = {}; // Objeto para guardar as instâncias dos gráficos

        // 2. FUNÇÃO PRINCIPAL PARA ATUALIZAR O DASHBOARD
        function updateDashboard(startDate, endDate) {
            // Garante que a hora final seja no fim do dia para incluir todas as vendas
            endDate.setHours(23, 59, 59, 999);

            // Filtra as vendas pelo período selecionado
            const filteredSales = dbVendas.filter(sale => {
                const saleDate = new Date(sale.date);
                return saleDate >= startDate && saleDate <= endDate;
            });

            // --- Calcula e exibe os KPIs ---
            let faturamentoTotal = 0;
            let lucroTotal = 0;
            const numeroVendas = filteredSales.length;

            filteredSales.forEach(sale => {
                faturamentoTotal += sale.total;
                // Calcula o lucro
                sale.itens.forEach(item => {
                    if (!item.isDiscount) {
                        const product = dbProdutos.find(p => p.codigo === item.codigo);
                        if (product && product.precoCusto) {
                            const custoItem = parseFloat(product.precoCusto);
                            const precoVendaItem = parseFloat(item.preco);
                            lucroTotal += (precoVendaItem - custoItem) * item.quantidade;
                        }
                    }
                });
            });

            const ticketMedio = numeroVendas > 0 ? faturamentoTotal / numeroVendas : 0;

            kpiFaturamentoEl.textContent = formatCurrency(faturamentoTotal);
            kpiLucroEl.textContent = formatCurrency(lucroTotal);
            kpiVendasEl.textContent = numeroVendas;
            kpiTicketMedioEl.textContent = formatCurrency(ticketMedio);

            // --- Prepara dados e renderiza os gráficos ---
            renderFaturamentoChart(filteredSales, startDate, endDate);
            renderCategoriasChart(filteredSales);
            renderProdutosChart(filteredSales);
            renderDiasDaSemanaChart(filteredSales);
        }

        // 3. FUNÇÕES PARA RENDERIZAR CADA GRÁFICO
        function renderChart(chartName, type, data, options) {
            if (dashboardCharts[chartName]) {
                dashboardCharts[chartName].destroy();
            }
            dashboardCharts[chartName] = new Chart(chartContexts[chartName], { type, data, options });
        }

        function renderFaturamentoChart(sales, startDate, endDate) {
            const salesByDate = {};
            let currentDate = new Date(startDate);
            while (currentDate <= endDate) {
                salesByDate[currentDate.toISOString().split('T')[0]] = 0;
                currentDate.setDate(currentDate.getDate() + 1);
            }

            sales.forEach(sale => {
                const dateStr = new Date(sale.date).toISOString().split('T')[0];
                salesByDate[dateStr] += sale.total;
            });
            
            const labels = Object.keys(salesByDate).map(date => new Date(date).toLocaleDateString('pt-BR', {timeZone: 'UTC'}));
            const data = Object.values(salesByDate);

            renderChart('faturamento', 'line', {
                labels: labels,
                datasets: [{
                    label: 'Faturamento',
                    data: data,
                    backgroundColor: 'rgba(255, 95, 31, 0.2)',
                    borderColor: '#FF5F1F',
                    borderWidth: 2,
                    tension: 0.1
                }]
            });
        }

        function renderCategoriasChart(sales) {
            const salesByCategory = {};
            sales.forEach(sale => {
                sale.itens.forEach(item => {
                    if (!item.isDiscount) {
                        const product = dbProdutos.find(p => p.codigo === item.codigo);
                        if (product) {
                            const category = dbCategorias.find(c => c.id == product.categoriaId);
                            const categoryName = category ? toTitleCase(category.nome) : 'Sem Categoria';
                            salesByCategory[categoryName] = (salesByCategory[categoryName] || 0) + (item.preco * item.quantidade);
                        }
                    }
                });
            });

            const labels = Object.keys(salesByCategory);
            const data = Object.values(salesByCategory);

            renderChart('categorias', 'doughnut', {
                labels: labels,
                datasets: [{
                    label: 'Vendas por Categoria',
                    data: data,
                    backgroundColor: ['#FF5F1F', '#FF007A', '#28a745', '#17a2b8', '#ffc107', '#6f42c1'],
                    hoverOffset: 4
                }]
            });
        }

        function renderProdutosChart(sales) {
            const profitByProduct = {};
            sales.forEach(sale => {
                sale.itens.forEach(item => {
                    if (!item.isDiscount) {
                        const product = dbProdutos.find(p => p.codigo === item.codigo);
                        if (product && product.precoCusto) {
                            const productName = toTitleCase(product.nome);
                            const profit = (item.preco - product.precoCusto) * item.quantidade;
                            profitByProduct[productName] = (profitByProduct[productName] || 0) + profit;
                        }
                    }
                });
            });

            const top5 = Object.entries(profitByProduct)
                .sort(([, a], [, b]) => b - a)
                .slice(0, 5);

            const labels = top5.map(item => item[0]);
            const data = top5.map(item => item[1]);
            
            renderChart('produtos', 'bar', {
                labels: labels,
                datasets: [{
                    label: 'Lucro por Produto',
                    data: data,
                    backgroundColor: '#FF007A',
                }]
            }, { indexAxis: 'y' });
        }

        function renderDiasDaSemanaChart(sales) {
            const labels = ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'];
            const data = Array(7).fill(0);

            sales.forEach(sale => {
                const dayOfWeek = new Date(sale.date).getDay();
                data[dayOfWeek] += sale.total;
            });

            renderChart('diasDaSemana', 'bar', {
                labels: labels,
                datasets: [{
                    label: 'Faturamento por Dia',
                    data: data,
                    backgroundColor: '#28a745',
                }]
            });
        }

        // 4. EVENT LISTENERS PARA OS FILTROS
        function handleDateChange() {
            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);

            // Adiciona um dia à data de início para corrigir fuso horário do input
            startDate.setDate(startDate.getDate() + 1);
            endDate.setDate(endDate.getDate() + 1);

            if (startDate && endDate && startDate <= endDate) {
                updateDashboard(startDate, endDate);
            }
        }

        startDateInput.addEventListener('change', handleDateChange);
        endDateInput.addEventListener('change', handleDateChange);

        quickFilterButtons.forEach(button => {
            button.addEventListener('click', () => {
                const period = button.dataset.period;
                const today = new Date();
                let startDate = new Date();
                
                if (period === 'month') {
                    startDate = new Date(today.getFullYear(), today.getMonth(), 1);
                } else {
                    startDate.setDate(today.getDate() - parseInt(period));
                }

                // Formata as datas para o formato YYYY-MM-DD
                const yyyyEnd = today.getFullYear();
                const mmEnd = String(today.getMonth() + 1).padStart(2, '0');
                const ddEnd = String(today.getDate()).padStart(2, '0');

                const yyyyStart = startDate.getFullYear();
                const mmStart = String(startDate.getMonth() + 1).padStart(2, '0');
                const ddStart = String(startDate.getDate()).padStart(2, '0');
                
                endDateInput.value = `${yyyyEnd}-${mmEnd}-${ddEnd}`;
                startDateInput.value = `${yyyyStart}-${mmStart}-${ddStart}`;

                // Chama a função de atualização
                updateDashboard(startDate, today);
            });
        });

        // 5. INICIALIZAÇÃO PADRÃO
        // Simula o clique no botão "Este Mês" para carregar com dados iniciais
        document.querySelector('button[data-period="month"]').click();
    }
    // Chama a função principal do dashboard quando a página carrega
    initializeDashboard();

// ==========================================================
// --- LÓGICA COMPLETA E CORRIGIDA DA SEÇÃO DE ORÇAMENTOS ---
// ==========================================================
    function initializeOrcamentos() {

        // --- 1. NAVEGAÇÃO ENTRE TELAS (Já existente) ---
        const orcamentoNavLinks = document.querySelectorAll('#orcamentos-content .sub-nav-link');
        const orcamentoViews = document.querySelectorAll('#orcamentos-content .orcamento-view');

        orcamentoNavLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const targetId = link.dataset.target;
                orcamentoNavLinks.forEach(l => l.classList.remove('active'));
                orcamentoViews.forEach(v => v.classList.remove('active'));
                link.classList.add('active');
                document.getElementById(targetId).classList.add('active');
            });
        });

        // --- 2. LÓGICA DO FORMULÁRIO DE CRIAÇÃO ---
        const orcForm = document.getElementById('form-orcamento');
        const orcClienteCodigoInput = document.getElementById('orc-cliente-codigo');
        const orcClienteNomeInput = document.getElementById('orc-cliente-nome');
        const orcValidadeInput = document.getElementById('orc-validade-input');
        const orcProdutoInput = document.getElementById('orc-produto-input');
        const orcProdutoNomeEl = document.getElementById('orc-produto-nome');
        const orcQuantidadeInput = document.getElementById('orc-quantidade-input');
        const orcAddProductBtn = document.getElementById('orc-add-product-btn');
        const orcItemsBody = document.getElementById('orc-items-body');
        const orcTotalEl = document.getElementById('orc-total');
        const orcLimparBtn = document.getElementById('orc-limpar-btn');
        const orcSalvarBtn = document.getElementById('orc-salvar-btn');

        // --- NOVOS ELEMENTOS DO MODAL ---
        const btnOpenProductLookup = document.getElementById('btn-open-product-lookup');
        const productLookupModal = document.getElementById('product-lookup-modal');
        const productLookupCloseBtn = productLookupModal.querySelector('.close-button');
        const productLookupSearch = document.getElementById('product-lookup-search');
        const productLookupList = document.getElementById('product-lookup-list');

        let orcamentoAtualItens = [];

        function renderOrcamentoItens() {
            orcItemsBody.innerHTML = '';
            let total = 0;
            orcamentoAtualItens.forEach((item, index) => {
                const itemTotal = item.preco * item.quantidade;
                total += itemTotal;
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${toTitleCase(item.nome)}</td>
                    <td>${formatCurrency(item.preco)}</td>
                    <td>${item.quantidade}</td>
                    <td>${formatCurrency(itemTotal)}</td>
                    <td class="actions"><button type="button" class="btn-delete orc-remove-item-btn" data-index="${index}">Excluir</button></td>
                `;
                orcItemsBody.appendChild(row);
            });
            orcTotalEl.textContent = formatCurrency(total);
            return total; // Retorna o total para ser usado ao salvar
        }

        orcClienteCodigoInput.addEventListener('input', () => {
            const codigo = orcClienteCodigoInput.value.toUpperCase();
            const cliente = dbClientes.find(c => c.codigo.toUpperCase() === codigo);
            if (cliente) {
                orcClienteNomeInput.value = toTitleCase(cliente.nome);
                orcClienteNomeInput.readOnly = true;
            } else {
                orcClienteNomeInput.value = '';
                orcClienteNomeInput.readOnly = false;
            }
        });

        orcAddProductBtn.addEventListener('click', () => {
            const produtoQuery = orcProdutoInput.value.toUpperCase();
            const quantidade = parseInt(orcQuantidadeInput.value);
            if (!produtoQuery || isNaN(quantidade) || quantidade <= 0) {
                alert('Por favor, preencha o produto e uma quantidade válida.');
                return;
            }
            const produtoEncontrado = dbProdutos.find(p => p.codigo.toUpperCase() === produtoQuery || p.nome.toUpperCase().includes(produtoQuery));
            if (!produtoEncontrado) {
                alert('Produto não encontrado.');
                return;
            }
            orcamentoAtualItens.push({
                codigo: produtoEncontrado.codigo,
                nome: produtoEncontrado.nome,
                preco: parseFloat(produtoEncontrado.precoVenda),
                quantidade: quantidade,
            });
            orcProdutoInput.value = '';
            orcQuantidadeInput.value = 1;
            renderOrcamentoItens();
            orcProdutoInput.focus();
        });

        orcItemsBody.addEventListener('click', (e) => {
            if (e.target.classList.contains('orc-remove-item-btn')) {
                const index = parseInt(e.target.dataset.index);
                orcamentoAtualItens.splice(index, 1);
                renderOrcamentoItens();
            }
        });

        function limparFormOrcamento() {
            orcamentoAtualItens = [];
            orcForm.reset();
            orcClienteNomeInput.readOnly = false;
            renderOrcamentoItens();
        }
        
        orcLimparBtn.addEventListener('click', limparFormOrcamento);
        // --- LÓGICA PARA SALVAR O ORÇAMENTO ---
        orcSalvarBtn.addEventListener('click', () => {
            const nomeCliente = orcClienteNomeInput.value;
            const validadeDias = parseInt(orcValidadeInput.value);

            if (orcamentoAtualItens.length === 0) {
                alert('Adicione pelo menos um item ao orçamento.');
                return;
            }
            if (!nomeCliente) {
                alert('Por favor, informe o nome do cliente.');
                return;
            }

            const dataAtual = new Date();
            const dataValidade = new Date();
            dataValidade.setDate(dataAtual.getDate() + validadeDias);

            const novoOrcamento = {
                id: 'ORC' + String(orcamentoCounter++).padStart(4, '0'),
                dataCriacao: dataAtual.toISOString(),
                cliente: {
                    codigo: orcClienteCodigoInput.value.toUpperCase() || null,
                    nome: toTitleCase(nomeCliente)
                },
                validade: dataValidade.toISOString(),
                itens: orcamentoAtualItens,
                total: renderOrcamentoItens(),
                status: 'Pendente'
            };

            dbOrcamentos.push(novoOrcamento);
            saveData(STORAGE_KEYS.orcamentos, dbOrcamentos);

            alert(`Orçamento ${novoOrcamento.id} salvo com sucesso!`);
            limparFormOrcamento();
            renderFunctions.orcamentos(); // Atualiza a tabela na outra tela
        });
        // Evento para buscar produto em tempo real
        orcProdutoInput.addEventListener('input', () => {
            const query = orcProdutoInput.value.toUpperCase();
            if (!query) {
                orcProdutoNomeEl.textContent = '';
                return;
            }

            const produtoEncontrado = dbProdutos.find(p => p.codigo.toUpperCase() === query || p.nome.toUpperCase().includes(query));

            if (produtoEncontrado) {
                orcProdutoNomeEl.textContent = toTitleCase(produtoEncontrado.nome);
                orcProdutoNomeEl.classList.remove('error'); // Garante que a cor de erro seja removida
            } else {
                orcProdutoNomeEl.textContent = 'Produto não encontrado';
                orcProdutoNomeEl.classList.add('error'); // Adiciona a cor de erro
            }
        });
        // --- LÓGICA DO MODAL DE BUSCA DE PRODUTO ---

        // Função para desenhar a lista de produtos dentro do modal
        function renderProductLookup(data = dbProdutos) {
            productLookupList.innerHTML = '';
            data.forEach(prod => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="code-column">${prod.codigo}</td>
                    <td>${toTitleCase(prod.nome)}</td>
                    <td>${formatCurrency(parseFloat(prod.precoVenda))}</td>
                    <td>${prod.estoque}</td>
                    <td class="actions">
                        <button class="btn-edit btn-select-product" data-codigo="${prod.codigo}">Selecionar</button>
                    </td>
                `;
                productLookupList.appendChild(row);
            });
        }

        // Evento para ABRIR o modal
        btnOpenProductLookup.addEventListener('click', () => {
            renderProductLookup(); // Preenche a lista com todos os produtos
            productLookupModal.style.display = 'block';
            productLookupSearch.focus();
        });

        // Evento para FECHAR o modal
        productLookupCloseBtn.addEventListener('click', () => {
            productLookupModal.style.display = 'none';
        });

        // Evento para FILTRAR a lista enquanto digita na busca
        productLookupSearch.addEventListener('input', () => {
            const searchTerm = productLookupSearch.value.toUpperCase();
            const filteredProducts = dbProdutos.filter(p => 
                p.nome.toUpperCase().includes(searchTerm) || 
                p.codigo.toUpperCase().includes(searchTerm)
            );
            renderProductLookup(filteredProducts);
        });

        // Evento para SELECIONAR um produto da lista
        productLookupList.addEventListener('click', (e) => {
            if (e.target.classList.contains('btn-select-product')) {
                const productCode = e.target.dataset.codigo;
                orcProdutoInput.value = productCode;
                productLookupModal.style.display = 'none';

                // Dispara o evento de input para atualizar o nome do produto no formulário
                orcProdutoInput.dispatchEvent(new Event('input'));
            }
        });
    }
}); 
